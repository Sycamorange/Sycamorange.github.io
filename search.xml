<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础</title>
      <link href="2019/04/12/hou-duan/java/"/>
      <url>2019/04/12/hou-duan/java/</url>
      
        <content type="html"><![CDATA[<h2 id="基础概念与常识"><a href="#基础概念与常识" class="headerlink" title="基础概念与常识"></a>基础概念与常识</h2><h3 id="Java-语言有哪些特点"><a href="#Java-语言有哪些特点" class="headerlink" title="Java 语言有哪些特点?"></a>Java 语言有哪些特点?</h3><ol><li>简单易学；</li><li>面向对象（封装，继承，多态）；</li><li>平台无关性（ Java 虚拟机实现平台无关性）；</li><li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；</li><li>可靠性；</li><li>安全性；</li><li>支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；</li><li>编译与解释并存；</li></ol><h3 id="JVM-vs-JDK-vs-JRE"><a href="#JVM-vs-JDK-vs-JRE" class="headerlink" title="JVM vs JDK vs JRE"></a>JVM vs JDK vs JRE</h3><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><p>​        Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码?采用字节码的好处是什么?</strong></p><blockquote><p>在 Java 中，JVM 可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><p><strong>Java 程序从源代码到运行一般有下面 3 步：</strong></p><img src="/2019/04/12/hou-duan/java/1.png"><p>​        我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><p><strong>总结：</strong></p><p>​        Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><h4 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h4><p>​        JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>​        JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>​        如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h3 id="为什么说-Java-语言“编译与解释并存”？"><a href="#为什么说-Java-语言“编译与解释并存”？" class="headerlink" title="为什么说 Java 语言“编译与解释并存”？"></a>为什么说 Java 语言“编译与解释并存”？</h3><p>​        高级编程语言按照程序的执行方式分为编译型和解释型两种。简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。比如，你想阅读一本英文名著，你可以找一个英文翻译人员帮助你阅读，有两种选择方式，你可以先等翻译人员将全本的英文名著（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p><p>​        Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\*.class</code> 文件），这种字节码必须由 Java 解释器来解释执行。因此，我们可以认为 Java 语言编译与解释并存。</p><h3 id="Java-和-C-的区别"><a href="#Java-和-C-的区别" class="headerlink" title="Java 和 C++的区别?"></a>Java 和 C++的区别?</h3><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</li><li>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。</li><li>……</li></ul><h3 id="import-java-和-javax-有什么区别？"><a href="#import-java-和-javax-有什么区别？" class="headerlink" title="import java 和 javax 有什么区别？"></a>import java 和 javax 有什么区别？</h3><p>​        刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。</p><p>​        所以，实际上 java 和 javax 没有区别。这都是一个名字。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="字符型常量和字符串常量的区别"><a href="#字符型常量和字符串常量的区别" class="headerlink" title="字符型常量和字符串常量的区别?"></a>字符型常量和字符串常量的区别?</h3><ol><li><p><strong>形式</strong> : 字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符</p></li><li><p><strong>含义</strong> : 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)</p></li><li><p><strong>占内存大小</strong> ： 字符常量只占 2 个字节; 字符串常量占若干个字节 (<strong>注意： char 在 Java 中占两个字节</strong>),</p><blockquote><p>字符封装类 <code>Character</code> 有一个成员常量 <code>Character.SIZE</code> 值为 16,单位是<code>bits</code>,该值除以 8(<code>1byte=8bits</code>)后就可以得到 2 个字节。</p></blockquote></li></ol><h3 id="标识符和关键字的区别是什么？"><a href="#标识符和关键字的区别是什么？" class="headerlink" title="标识符和关键字的区别是什么？"></a>标识符和关键字的区别是什么？</h3><p>​        在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符，简单来说，标识符就是一个名字。但是有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这种特殊的标识符就是关键字。因此，关键字是被赋予特殊含义的标识符。比如，在我们的日常生活中 ，“警察局”这个名字已经被赋予了特殊的含义，所以如果你开一家店，店的名字不能叫“警察局”，“警察局”就是我们日常生活中的关键字。</p><h3 id="Java-中有哪些常见的关键字？"><a href="#Java-中有哪些常见的关键字？" class="headerlink" title="Java 中有哪些常见的关键字？"></a>Java 中有哪些常见的关键字？</h3><table><thead><tr><th>访问控制</th><th>private</th><th>protected</th><th>public</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>类，方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr><td></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td></td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr><td></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>default</td><td></td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr><td></td><td>short</td><td>null</td><td>true</td><td>false</td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="使用-this-和-super-要注意的问题"><a href="#使用-this-和-super-要注意的问题" class="headerlink" title="使用 this 和 super 要注意的问题"></a>使用 this 和 super 要注意的问题</h4><ul><li>在构造器中使用 <code>super()</code> 调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this 调用本类中的其他构造方法时，也要放在首行。</li><li>this、super不能用在static方法中。</li></ul><p><strong>简单解释一下：</strong></p><p>​        被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享。而 this 代表对本类对象的引用，指向本类对象；而 super 代表对父类对象的引用，指向父类对象；所以， <strong>this和super是属于对象范畴的东西，而静态方法是属于类范畴的东西</strong>。</p><h4 id="static-关键字详解"><a href="#static-关键字详解" class="headerlink" title="static 关键字详解"></a>static 关键字详解</h4><h5 id="static-关键字主要有以下四种使用场景"><a href="#static-关键字主要有以下四种使用场景" class="headerlink" title="static 关键字主要有以下四种使用场景"></a>static 关键字主要有以下四种使用场景</h5><ol><li><p><code>修饰成员变量和成员方法</code></p><p>​        被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。</p><p>​        方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p><p>​         HotSpot 虚拟机中方法区也常被称为 “永久代”，本质上两者并不等价。仅仅是因为 HotSpot 虚拟机设计团队用永久代来实现方法区而已，这样 HotSpot 虚拟机的垃圾收集器就可以像管理 Java 堆一样管理这部分内存了。但是这并不是一个好主意，因为这样更容易遇到内存溢出问题。</p><p>调用格式：</p><ul><li><code>类名.静态变量名</code></li><li><code>类名.静态方法名()</code></li></ul><p>如果变量或者方法被 private 则代表该属性或者该方法只能在类的内部被访问而不能在类的外部被访问。</p></li><li><p><code>静态代码块</code></p><p>​        静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块 —&gt; 非静态代码块 —&gt; 构造方法)。 该类不管创建多少对象，静态代码块只执行一次。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态代码块的格式</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    语句体<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>​        一个类中的静态代码块可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果静态代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</p><p>​        静态代码块对于定义在它之后的静态变量，可以赋值，但是不能访问。</p></li><li><p><code>修饰类(只能修饰内部类)</code></p><p>​        静态内部类与非静态内部类之间存在一个最大的区别，我们知道非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着：</p><ol><li>它的创建是不需要依赖外围类的创建。</li><li>它不能使用任何外围类的非static成员变量和方法。</li></ol><p><code>Example</code>（静态内部类实现单例模式）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明为 private 避免调用默认构造方法创建对象</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 声明为 private 表明静态内部该类只能在该 Singleton 类中被访问</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​        当 <code>Singleton</code> 类加载时，静态内部类 <code>SingletonHolder</code> 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code>方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 <code>SingletonHolder</code> 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>​        这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p></li><li><p><code>静态导包(用来导入类中的静态资源，1.5之后的新特性)</code></p><p>格式为：<code>import static</code> </p><p>​        这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将Math中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用</span><span class="token comment" spellcheck="true">//如果只想导入单一某个静态方法，只需要将*换成对应的方法名即可 </span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//换成import static java.lang.Math.max;具有一样的效果</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h5 id="static-静态代码块与-非静态代码块-构造代码块"><a href="#static-静态代码块与-非静态代码块-构造代码块" class="headerlink" title="static{}静态代码块与{}非静态代码块(构造代码块)"></a><code>static{}</code>静态代码块与<code>{}</code>非静态代码块(构造代码块)</h5><ul><li>相同点： 都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，定义多个时按定义的顺序执行，一般在代码块中对一些static变量进行赋值。 </li><li>不同点： 静态代码块在非静态代码块之前执行(静态代码块 -&gt; 非静态代码块 -&gt; 构造方法)。静态代码块只在第一次new执行一次，之后不再执行，而非静态代码块在每new一次就执行一次。 非静态代码块可在普通方法中定义(不过作用不大)；而静态代码块不行。</li></ul><blockquote><p><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>：静态代码块可能在第一次new的时候执行，但不一定只在第一次new的时候执行。比如通过 <code>Class.forName("ClassDemo")</code>创建 Class 对象的时候也会执行。</p></blockquote><p>​        一般情况下,如果有些代码比如一些项目最常用的变量或对象必须在项目启动的时候就执行的时候,需要使用静态代码块,这种代码是主动执行的。如果我们想要设计不需要创建对象就可以调用类中的方法，例如：Arrays类，Character类，String类等，就需要使用静态方法，两者的区别是，静态代码块是自动执行的而静态方法是被调用的时候才执行的。</p><p><code>Example</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"默认构造方法！--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非静态代码块</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"非静态代码块！--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态代码块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"静态代码块！--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"静态方法中的内容! --"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"静态方法中的代码块！--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态代码块！--静态方法中的内容! --静态方法中的代码块！--</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码输出：</p><pre><code>静态代码块！--非静态代码块！--默认构造方法！--静态方法中的内容! --静态方法中的代码块！--</code></pre><p>当只执行 <code>Test.test();</code> 时输出：</p><pre><code>静态代码块！--静态方法中的内容! --静态方法中的代码块！--</code></pre><p>当只执行 <code>Test test = new Test();</code> 时输出：</p><pre><code>静态代码块！--非静态代码块！--默认构造方法！--</code></pre><p>非静态代码块与构造函数的区别是： 非静态代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化，因为构造函数是可以多个的，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会先执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。 </p><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p>​        在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（–）。</p><p>​        ++和–运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。</p><h3 id="continue、break、和-return-的区别是什么？"><a href="#continue、break、和-return-的区别是什么？" class="headerlink" title="continue、break、和 return 的区别是什么？"></a>continue、break、和 return 的区别是什么？</h3><p>​        在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：</p><ol><li>continue ：指跳出当前的这一次循环，继续下一次循环。</li><li>break ：指跳出整个循环体，继续执行循环下面的语句。</li></ol><p>return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：</p><ol><li><code>return;</code> ：直接使用 return 结束方法执行，用于没有返回值函数的方法</li><li><code>return value;</code> ：return 一个特定值，用于有返回值函数的方法</li></ol><h3 id="Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？"><a href="#Java-泛型了解么？什么是类型擦除？介绍一下常用的通配符？" class="headerlink" title="Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？"></a>Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h3><p>​        Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>​        Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里直接添加会报错</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token operator">></span> clazz <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method add <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//但是通过反射添加，是可以的</span>add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"kl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。</p><p><strong>1.泛型类</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><span class="token comment" spellcheck="true">//在实例化泛型类时，必须指定T的具体类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> T key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Generic</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如何实例化泛型类：</p><pre class=" language-java"><code class="language-java">Generic<span class="token operator">&lt;</span>Integer<span class="token operator">></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2.泛型接口</strong> ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> T <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现泛型接口，不指定类型：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> T <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现泛型接口，指定类型：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>3.泛型方法</strong> ：</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span> E <span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> E<span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span>   <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span> E element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%s "</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建不同类型数组： Integer, Double 和 Character</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span> intArray  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span> stringArray  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>常用的通配符为： T，E，K，V，？</strong></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><h3 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="==和 equals 的区别"></a>==和 equals 的区别</h3><p>对于基本数据类型来说，==比较的是值。对于引用数据类型来说，==比较的是对象的内存地址。</p><blockquote><p>因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p></blockquote><p><strong><code>equals()</code></strong> 作用不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于<code>Object</code>类中，而<code>Object</code>类是所有类的直接或间接父类。</p><p><code>Object</code> 类 <code>equals()</code> 方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>equals()</code> 方法存在两种使用情况：</p><ul><li><strong>类没有覆盖 <code>equals()</code>方法</strong> ：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 <code>Object</code>类<code>equals()</code>方法。</li><li><strong>类覆盖了 <code>equals()</code>方法</strong> ：一般我们都覆盖 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a 为一个引用</span>        String b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// b为另一个引用,对象的内容一样</span>        String aa <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放在常量池中</span>        String bb <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从常量池中查找</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aa <span class="token operator">==</span> bb<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aa==bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false，非同一对象</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a==b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aEQb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// true</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>说明：</strong></p><ul><li><code>String</code> 中的 <code>equals</code> 方法是被重写过的，因为 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址，而 <code>String</code> 的 <code>equals</code> 方法比较的是对象的值。</li><li>当创建 <code>String</code> 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 <code>String</code> 对象。</li></ul><p><code>String</code>类<code>equals()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode()与 equals()"></a>hashCode()与 equals()</h3><p><strong>1)hashCode()介绍:</strong></p><p><code>hashCode()</code> 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。<code>hashCode()</code>定义在 JDK 的 <code>Object</code> 类中，这就意味着 Java 中的任何类都包含有 <code>hashCode()</code> 函数。另外需要注意的是： <code>Object</code> 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><p><strong>2)为什么要有 hashCode？</strong></p><p>我们以“<code>HashSet</code> 如何检查重复”为例子来说明为什么要有 hashCode？</p><p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code> 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，<code>HashSet</code> 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 <code>equals()</code> 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，<code>HashSet</code> 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head First Java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p><strong>3)为什么重写 <code>equals</code> 时必须重写 <code>hashCode</code> 方法？</strong></p><p>如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等,对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。<strong>因此，equals 方法被覆盖过，则 <code>hashCode</code> 方法也必须被覆盖。</strong></p><blockquote><p><code>hashCode()</code>的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p></blockquote><p><strong>4)为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？</strong></p><p>在这里解释一位小伙伴的问题。以下内容摘自《Head Fisrt Java》。</p><p>因为 <code>hashCode()</code> 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 <code>hashCode</code>。</p><p>我们刚刚也提到了 <code>HashSet</code>,如果 <code>HashSet</code> 在对比的时候，同样的 hashcode 有多个对象，它会使用 <code>equals()</code> 来判断是否真的相同。也就是说 <code>hashcode</code> 只是用来缩小查找成本。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="Java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"><a href="#Java-中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？" class="headerlink" title="Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？"></a>Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？</h3><p>Java 中有 8 种基本数据类型，分别为：</p><ol><li>6 种数字类型 ：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code>。</li></ol><p>这 8 种基本数据类型的默认值以及所占空间的大小如下：</p><table><thead><tr><th style="text-align:left">基本类型</th><th style="text-align:left">位数</th><th style="text-align:left">字节</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left"><code>int</code></td><td style="text-align:left">32</td><td style="text-align:left">4</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">16</td><td style="text-align:left">2</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left"><code>long</code></td><td style="text-align:left">64</td><td style="text-align:left">8</td><td style="text-align:left">0L</td></tr><tr><td style="text-align:left"><code>byte</code></td><td style="text-align:left">8</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left"><code>char</code></td><td style="text-align:left">16</td><td style="text-align:left">2</td><td style="text-align:left">‘u0000’</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">32</td><td style="text-align:left">4</td><td style="text-align:left">0f</td></tr><tr><td style="text-align:left"><code>double</code></td><td style="text-align:left">64</td><td style="text-align:left">8</td><td style="text-align:left">0d</td></tr><tr><td style="text-align:left"><code>boolean</code></td><td style="text-align:left">1</td><td style="text-align:left"></td><td style="text-align:left">false</td></tr></tbody></table><p>另外，对于 <code>boolean</code>，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。</p><p><strong>注意：</strong></p><ol><li>Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析。</li><li><code>char a = 'h'</code>char :单引号，<code>String a = "hello"</code> :双引号。</li></ol><p>这八种基本类型都有对应的包装类分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。</p><p>包装类型不赋值就是 <code>Null</code> ，而基本类型有默认值且不是 <code>Null</code>。</p><p>另外，这个问题建议还可以先从 JVM 层面来分析。</p><p>基本数据类型直接存放在 Java 虚拟机栈中的局部变量表中，而包装类型属于对象类型，我们知道对象实例都存在于堆中。相比于对象类型， 基本数据类型占用的空间非常小。</p><blockquote><p>《深入理解 Java 虚拟机》 ：局部变量表主要存放了编译期可知的基本数据类型<strong>（boolean、byte、char、short、int、float、long、double）</strong>、<strong>对象引用</strong>（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p></blockquote><h3 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h3><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>装箱其实就是调用了 包装类的<code>valueOf()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p><p>因此，</p><ul><li><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code></li><li><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>;</li></ul><h3 id="8-种基本类型的包装类和常量池"><a href="#8-种基本类型的包装类和常量池" class="headerlink" title="8 种基本类型的包装类和常量池"></a>8 种基本类型的包装类和常量池</h3><p>Java 基本类型的包装类的大部分都实现了常量池技术。<code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，<code>Character</code> 创建了数值在[0,127]范围的缓存数据，<code>Boolean</code> 直接返回 <code>True</code> Or <code>False</code>。</p><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><h3 id="在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="在一个静态方法内调用一个非静态成员为什么是非法的?"></a>在一个静态方法内调用一个非静态成员为什么是非法的?</h3><p>这个需要结合 JVM 的相关知识，静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，然后通过类的实例对象去访问。在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</p><h3 id="静态方法和实例方法有何不同？"><a href="#静态方法和实例方法有何不同？" class="headerlink" title="静态方法和实例方法有何不同？"></a>静态方法和实例方法有何不同？</h3><ol><li><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，<strong>调用静态方法可以无需创建对象。</strong></p></li><li><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p></li></ol><h3 id="为什么-Java-中只有值传递？"><a href="#为什么-Java-中只有值传递？" class="headerlink" title="为什么 Java 中只有值传递？"></a>为什么 Java 中只有值传递？</h3><p>首先，我们回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。</p><p><strong>按值调用(call by value)</strong> 表示方法接收的是调用者提供的值，<strong>按引用调用（call by reference)</strong> 表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。它用来描述各种程序设计语言（不只是 Java)中方法参数传递方式。</p><p><strong>Java 程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</strong></p><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><blockquote><p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p><p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p></blockquote><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</p><p>下面是《Java 核心技术》对重载这个概念的介绍：</p><img src="/2019/04/12/hou-duan/java/2.jpg"><p>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p><ol><li>返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li><li>如果父类方法访问修饰符为 <code>private/final/static</code> 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。</li><li>构造方法无法被重写</li></ol><p>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</p><table><thead><tr><th style="text-align:left">区别点</th><th style="text-align:left">重载方法</th><th style="text-align:left">重写方法</th></tr></thead><tbody><tr><td style="text-align:left">发生范围</td><td style="text-align:left">同一个类</td><td style="text-align:left">子类</td></tr><tr><td style="text-align:left">参数列表</td><td style="text-align:left">必须修改</td><td style="text-align:left">一定不能修改</td></tr><tr><td style="text-align:left">返回类型</td><td style="text-align:left">可修改</td><td style="text-align:left">子类方法返回值类型应比父类方法返回值类型更小或相等</td></tr><tr><td style="text-align:left">异常</td><td style="text-align:left">可修改</td><td style="text-align:left">子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</td></tr><tr><td style="text-align:left">访问修饰符</td><td style="text-align:left">可修改</td><td style="text-align:left">一定不能做更严格的限制（可以降低限制）</td></tr><tr><td style="text-align:left">发生阶段</td><td style="text-align:left">编译期</td><td style="text-align:left">运行期</td></tr></tbody></table><p><strong>方法的重写要遵循“两同两小一大”</strong>（以下内容摘录自《疯狂 Java 讲义》）：</p><ul><li>“两同”即方法名相同、形参列表相同；</li><li>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</li><li>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li></ul><p>⭐️ 关于 <strong>重写的返回值类</strong>型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p><h3 id="深拷贝-vs-浅拷贝"><a href="#深拷贝-vs-浅拷贝" class="headerlink" title="深拷贝 vs 浅拷贝"></a>深拷贝 vs 浅拷贝</h3><ol><li><strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li><li><strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li></ol><img src="/2019/04/12/hou-duan/java/8.jpg"><h2 id="Java-面向对象"><a href="#Java-面向对象" class="headerlink" title="Java 面向对象"></a>Java 面向对象</h2><h3 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h3><ul><li><strong>面向过程</strong> ：<strong>面向过程性能比面向对象高。</strong> 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li><li><strong>面向对象</strong> ：<strong>面向对象易维护、易复用、易扩展。</strong> 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低</strong>。</li></ul><blockquote><p>面向过程也需要分配内存，计算内存偏移量，Java 性能差的主要原因并不是因为它是面向对象语言，而是 Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执行的二进制机械码。</p><p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比 Java 好。</p></blockquote><h3 id="成员变量与局部变量的区别有哪些？"><a href="#成员变量与局部变量的区别有哪些？" class="headerlink" title="成员变量与局部变量的区别有哪些？"></a>成员变量与局部变量的区别有哪些？</h3><ol><li>从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 <code>public</code>,<code>private</code>,<code>static</code> 等修饰符所修饰，而局部变量不能被访问控制修饰符及 <code>static</code> 所修饰；但是，成员变量和局部变量都能被 <code>final</code> 所修饰。</li><li>从变量在内存中的存储方式来看,如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li><li>从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</li><li>从变量是否有默认值来看，成员变量如果没有被赋初，则会自动以类型的默认值而赋值（一种情况例外:被 <code>final</code> 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li></ol><h3 id="对象的相等与指向他们的引用相等-两者有什么不同"><a href="#对象的相等与指向他们的引用相等-两者有什么不同" class="headerlink" title="对象的相等与指向他们的引用相等,两者有什么不同?"></a>对象的相等与指向他们的引用相等,两者有什么不同?</h3><p>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</p><h3 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法 ，这里只是为了举例子）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id属性私有化</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//name属性私有化</span>    <span class="token comment" spellcheck="true">//获取id的方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置id的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取name的方法</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置name的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p><p><strong>关于继承如下 3 点请记住：</strong></p><ol><li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。（以后介绍）。</li></ol><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态，顾名思义，表示一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。</p><p><strong>多态的特点:</strong></p><ul><li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</li><li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</li><li>多态不能调用“只在子类存在但在父类不存在”的方法；</li><li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li></ul><h3 id="String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h3><p><strong>可变性</strong></p><p>简单的来说：<code>String</code> 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以<code>String</code> 对象是不可变的。</p><blockquote><p>在 Java 9 之后，String 、<code>StringBuilder</code> 与 <code>StringBuffer</code> 的实现改用 byte 数组存储字符串 <code>private final byte[] value</code></p></blockquote><p>而 <code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 <code>final</code> 关键字修饰，所以这两种对象都是可变的。</p><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 的构造方法都是调用父类构造方法也就是<code>AbstractStringBuilder</code> 实现的，大家可以自行查阅源码。</p><p><strong>线程安全性</strong></p><p><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。<code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据: 适用 <code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></li><li>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></li></ol><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="何为反射？"><a href="#何为反射？" class="headerlink" title="何为反射？"></a>何为反射？</h3><p>如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。</p><p>反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。</p><p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><h3 id="反射机制优缺点"><a href="#反射机制优缺点" class="headerlink" title="反射机制优缺点"></a>反射机制优缺点</h3><ul><li><strong>优点</strong> ： 可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利</li><li><strong>缺点</strong> ：让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。</li></ul><h3 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h3><p>像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。</p><p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p><p><strong>这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。</strong></p><p>另外，像 Java 中的一大利器 <strong>注解</strong> 的实现也用到了反射。</p><p>为什么你使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么你通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p><p>这些都是因为你可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解。你获取到注解之后，就可以做进一步的处理。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="Java-异常类层次结构图"><a href="#Java-异常类层次结构图" class="headerlink" title="Java 异常类层次结构图"></a>Java 异常类层次结构图</h3><p>在 Java 中，所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <code>Throwable</code> 类。<code>Throwable</code> 类有两个重要的子类 <code>Exception</code>（异常）和 <code>Error</code>（错误）。<code>Exception</code> 能被程序本身处理(<code>try-catch</code>)， <code>Error</code> 是无法处理的(只能尽量避免)。</p><p><code>Exception</code> 和 <code>Error</code> 二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><ul><li><strong><code>Exception</code></strong> :程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 受检查异常(必须处理) 和 不受检查异常(可以不处理)。</li><li><strong><code>Error</code></strong> ：<code>Error</code> 属于程序无法处理的错误 ，我们没办法通过 <code>catch</code> 来进行捕获 。例如，Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li></ul><p><strong>受检查异常</strong></p><p>Java 代码在编译过程中，如果受检查异常没有被 <code>catch</code>/<code>throw</code> 处理的话，就没办法通过编译 。</p><p>除了<code>RuntimeException</code>及其子类以外，其他的<code>Exception</code>类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、<code>ClassNotFoundException</code> 、<code>SQLException</code>…。</p><p><strong>不受检查异常</strong></p><p>Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p><p><code>RuntimeException</code> 及其子类都统称为非受检查异常，例如：<code>NullPointerException</code>、<code>NumberFormatException</code>（字符串转换为数字）、<code>ArrayIndexOutOfBoundsException</code>（数组越界）、<code>ClassCastException</code>（类型转换错误）、<code>ArithmeticException</code>（算术错误）等。</p><h3 id="Throwable-类常用方法"><a href="#Throwable-类常用方法" class="headerlink" title="Throwable 类常用方法"></a>Throwable 类常用方法</h3><ul><li><strong><code>public string getMessage()</code></strong>:返回异常发生时的简要描述</li><li><strong><code>public string toString()</code></strong>:返回异常发生时的详细信息</li><li><strong><code>public string getLocalizedMessage()</code></strong>:返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage（）</code>返回的结果相同</li><li><strong><code>public void printStackTrace()</code></strong>:在控制台上打印 <code>Throwable</code> 对象封装的异常信息</li></ul><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><ul><li><strong><code>try</code>块：</strong> 用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。</li><li><strong><code>catch</code>块：</strong> 用于处理 try 捕获到的异常。</li><li><strong><code>finally</code> 块：</strong> 无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</li></ul><p><strong>在以下 3 种特殊情况下，<code>finally</code> 块不会被执行：</strong></p><ol start="2"><li>在 <code>try</code> 或 <code>finally</code>块中用了 <code>System.exit(int)</code>退出程序。但是，如果 <code>System.exit(int)</code> 在异常语句之后，<code>finally</code> 还是会被执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><p><strong>注意：</strong> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。</p><h3 id="使用-try-with-resources-来代替try-catch-finally"><a href="#使用-try-with-resources-来代替try-catch-finally" class="headerlink" title="使用 try-with-resources 来代替try-catch-finally"></a>使用 <code>try-with-resources</code> 来代替<code>try-catch-finally</code></h3><ol><li><strong>适用范围（资源的定义）：</strong> 任何实现 <code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code> 的对象</li><li><strong>关闭资源和 finally 块的执行顺序：</strong> 在 <code>try-with-resources</code> 语句中，任何 catch 或 finally 块在声明的资源关闭后运行</li></ol><p>《Effecitve Java》中明确指出：</p><blockquote><p>面对必须要关闭的资源，我们总是应该优先使用 <code>try-with-resources</code> 而不是<code>try-finally</code>。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。<code>try-with-resources</code>语句让我们更容易编写必须要关闭的资源的代码，若采用<code>try-finally</code>则几乎做不到这点。</p></blockquote><p>Java 中类似于<code>InputStream</code>、<code>OutputStream</code> 、<code>Scanner</code> 、<code>PrintWriter</code>等的资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下我们都是通过<code>try-catch-finally</code>语句来实现这个需求，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//读取文本文件的内容</span>Scanner scanner <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://read.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 Java 7 之后的 <code>try-with-resources</code> 语句改造上面的代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> fnfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fnfe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当然多个资源需要关闭的时候，使用 <code>try-with-resources</code> 实现起来也非常简单，如果你还是用<code>try-catch-finally</code>可能会带来很多问题。</p><p>通过使用分号分隔，可以在<code>try-with-resources</code>块中声明多个资源。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>BufferedInputStream bin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             BufferedOutputStream bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> b<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="I-O-流"><a href="#I-O-流" class="headerlink" title="I\O 流"></a>I\O 流</h2><h3 id="什么是序列化-什么是反序列化"><a href="#什么是序列化-什么是反序列化" class="headerlink" title="什么是序列化?什么是反序列化?"></a>什么是序列化?什么是反序列化?</h3><p>如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。</p><p>简单来说：</p><ul><li><strong>序列化</strong>： 将数据结构或对象转换成二进制字节流的过程</li><li><strong>反序列化</strong>：将在序列化过程中所生成的二进制字节流的过程转换成数据结构或者对象的过程</li></ul><p>对于 Java 这种面向对象编程语言来说，我们序列化的都是对象（Object）也就是实例化后的类(Class)，但是在 C++这种半面向对象的语言中，struct(结构体)定义的是数据结构类型，而 class 对应的是对象类型。</p><p>维基百科是如是介绍序列化的：</p><blockquote><p><strong>序列化</strong>（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。</p></blockquote><p>综上：<strong>序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。</strong></p><h3 id="Java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#Java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="Java 序列化中如果有些字段不想进行序列化，怎么办？"></a>Java 序列化中如果有些字段不想进行序列化，怎么办？</h3><p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p><h3 id="获取用键盘输入常用的两种方法"><a href="#获取用键盘输入常用的两种方法" class="headerlink" title="获取用键盘输入常用的两种方法"></a>获取用键盘输入常用的两种方法</h3><p>方法 1：通过 <code>Scanner</code></p><pre class=" language-java"><code class="language-java">Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s  <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法 2：通过 <code>BufferedReader</code></p><pre class=" language-java"><code class="language-java">BufferedReader input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>按操作方式分类结构图：</p><p>按操作对象分类结构图：</p><h3 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h3><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 反射 </tag>
            
            <tag> I/O流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="2019/04/08/shu-ju-ku/sql/"/>
      <url>2019/04/08/shu-ju-ku/sql/</url>
      
        <content type="html"><![CDATA[<p>本质上就是一个文件系统.通过标准的SQL对数据进行CRUD操作<br><a id="more"></a></p><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="1、关系型数据库"><a href="#1、关系型数据库" class="headerlink" title="1、关系型数据库"></a>1、关系型数据库</h3><p>存放实体与实体之间的关系的数据库(就是二维表)</p><h3 id="2、非关系型数据库"><a href="#2、非关系型数据库" class="headerlink" title="2、非关系型数据库"></a>2、非关系型数据库</h3><p>存放的是对象</p><ul><li>NO-SQL(not only SQL)</li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><blockquote><p>结构化查询语句</p></blockquote><h3 id="1、SQL分类"><a href="#1、SQL分类" class="headerlink" title="1、SQL分类"></a>1、SQL分类</h3><h4 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL:数据定义语言"></a>DDL:数据定义语言</h4><ul><li>操作对象:数据库和表</li><li>关键词:create alter drop</li></ul><h4 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML:数据操作语言"></a>DML:数据操作语言</h4><ul><li>操作对象:记录</li></ul><h4 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL:数据查询语言"></a>DQL:数据查询语言</h4><blockquote><p>简单查询</p></blockquote><ul><li>去重操作 distinct<br>格式: select distinct 字段名,字段名2 from 表名</li><li>可以在查询的结果之上进行运算,不影响数据库中的值</li><li>给列起别名 格式: 字段名 [as] 别名</li></ul><blockquote><p>条件查询</p></blockquote><ul><li><p>模糊匹配 </p><ul><li>格式: 字段名 like “匹配规则”<ul><li>匹配内容 %<br>“龙”        值为龙<br>“%龙”    值以”龙”结尾<br>“龙%”    值以”龙”开头<br>“%龙%”    值包含”龙”</li><li>匹配个数 “__” 占两个位置</li></ul></li></ul></li><li><p>where后的条件写法：</p><ul><li>&gt; ,&lt;,=,&gt;=,&lt;=,&lt;&gt;,!=</li><li>like 使用占位符 _ 和 % , _ 代表一个字符 , % 代表任意个字符</li><li>in在某个范围中获得值</li><li>between 较小值 and 较大值</li></ul></li></ul><blockquote><p>排序查询</p></blockquote><ul><li>asc-升序</li><li>desc-降序</li></ul><blockquote><p>聚合函数<br>对一列进行计算 返回值是一个,忽略null值</p></blockquote><ul><li>sum(),avg(),max(),min(),count(),round(值,保留小数位);</li></ul><blockquote><p>分组：使用group by</p></blockquote><p>1.根据cno字段分组，分组后统计商品的个数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> cno<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> products <span class="token keyword">group</span> <span class="token keyword">by</span> cno<span class="token punctuation">;</span></code></pre><p>2.根据cno分组，分组统计每组商品的总数量，并且总数量&gt; 200</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> cno<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>pnum<span class="token punctuation">)</span> <span class="token keyword">from</span> products  <span class="token keyword">group</span> <span class="token keyword">by</span> cno<span class="token punctuation">;</span><span class="token keyword">select</span> cno<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>pnum<span class="token punctuation">)</span> <span class="token keyword">from</span> products  <span class="token keyword">group</span> <span class="token keyword">by</span> cno <span class="token keyword">having</span> <span class="token function">sum</span><span class="token punctuation">(</span>pnum<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">200</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意</p><ol><li>where 是对分组前的数据进行过滤，having 是对分组后的数据进行过滤</li><li>where 后面不能使用聚合函数，having可以</li></ol></blockquote><h3 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL:数据控制语言"></a>DCL:数据控制语言</h3><ul><li>操作对象:用户 事务 权限</li></ul><h3 id="2、truncate-清空表"><a href="#2、truncate-清空表" class="headerlink" title="2、truncate 清空表"></a>2、truncate 清空表</h3><ul><li><p>格式<br>truncate 表名; </p></li><li><p>作用</p><p>销毁表,重新创建一张空表</p></li><li><p>和delete from 区别</p><ul><li>delete属于DML语句 truncate属于DDL语句</li><li>delete逐条删除    truncate销毁表,重新创建一张空表</li></ul></li></ul><h3 id="3、一对多"><a href="#3、一对多" class="headerlink" title="3、一对多"></a>3、一对多</h3><blockquote><p>为了保证数据的有效性和完整性,添加约束(外键约束).</p></blockquote><ul><li><p>在多表的一方添加外键约束</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 多表名称 <span class="token keyword">add</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>外键名称<span class="token punctuation">)</span> <span class="token keyword">references</span> 一表名称<span class="token punctuation">(</span>主键<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>添加了外键约束之后有如下特点</p><ul><li>主表中不能删除从表中已引用的数据</li><li>从表中不能添加主表中不存在的数据</li></ul></li><li><p>开发中处理一对多</p><ul><li>在多表中添加一个外键,名称一般为主表的名称_id,字段类型一般和主表的主键的类型保持一致,</li><li>为了保证数据的有效性和完整性,在多表的外键上添加外键约束即可.</li></ul></li></ul><h3 id="4、多对多"><a href="#4、多对多" class="headerlink" title="4、多对多"></a>4、多对多</h3><blockquote><p>开发中处理多对多</p></blockquote><ul><li>引入一张中间表,存放两张表的主键,一般会将这两个字段设置为联合主键,这样就可以将多对多的关系拆分成两个一对多了</li><li>为了保证数据的有效性和完整性需要在中间表上添加两个外键约束即可</li></ul><h3 id="5、多表查询"><a href="#5、多表查询" class="headerlink" title="5、多表查询"></a>5、多表查询</h3><h4 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h4><blockquote><p>多张表无条件的联合查询，没有任何意思</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">;</span></code></pre><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><ul><li>格式1：显式的内连接<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span> <span class="token punctuation">[</span><span class="token keyword">inner</span><span class="token punctuation">]</span> <span class="token keyword">join</span> <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">ab</span>的连接条件</code></pre></li><li>格式2：隐式的内连接<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token number">a</span><span class="token punctuation">,</span><span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">ab</span>的连接条件</code></pre></li></ul><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>左外连接<pre><code>select a.*,b.* from a left [outer] join b on 连接条件;</code></pre>先展示join左边的(a)表的所有数据,根据条件关联查询 join右边的表(b),符合条件则展示出来,不符合以null值展示</li><li>右外连接<pre><code>select a.*,b.* from b right [outer] join a on 连接条件;</code></pre>先展示join右边的表(a)表的所有数据,根据条件关联查询join左边的表(b),符合条件则展示出来,不符合以null值展示</li></ul><h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><ul><li>图形化工具备份</li><li><p>MySQL数据库通过命令备份:不用登录数据库</p><pre class=" language-markdown"><code class="language-markdown">  mysqldump -uroot -p1234 store28>D:\1.sql</code></pre></li><li><p>MySQL数据库通过命令还原</p><blockquote><p>前提：手动的创建数据库</p></blockquote></li><li><p>方式1：不用登录数据库</p></li></ul><pre><code>mysql -uroot -p1234 bak1&lt;D:\1.sql</code></pre><ul><li>方式2：需要登录到指定的数据库上</li></ul><pre><code>source g:\1.sql</code></pre><h2 id="JDBC操作步骤"><a href="#JDBC操作步骤" class="headerlink" title="JDBC操作步骤"></a>JDBC操作步骤</h2><ol><li>数据库和表</li><li>创建一个项目</li><li>导入驱动jar包</li><li>编码<ul><li>注册驱动</li><li>获取连接</li><li>编写sql</li><li>创建预编译的语句执行者</li><li>设置参数</li><li>执行sql</li><li>处理结果</li><li>释放资源</li></ul></li></ol><h2 id="常用的连接池"><a href="#常用的连接池" class="headerlink" title="常用的连接池"></a>常用的连接池</h2><h3 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h3><ol><li>导入jar包(commons-dbcp-1.4.jar和commons-pool-1.5.6.jar)</li><li>使用api</li></ol><ul><li><p>a.硬编码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建连接池</span>BasicDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置信息</span>ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///数据库名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>b.配置文件</p></li></ul><blockquote><p>事先编写一个properties文件</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//存放配置文件</span>Properties prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/dbcp.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置</span><span class="token comment" spellcheck="true">//prop.setProperty("driverClassName", "com.mysql.jdbc.Driver");</span><span class="token comment" spellcheck="true">//创建连接池</span>DataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicDataSourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><blockquote><p>有自动回收空闲连接的功能.</p></blockquote><ol><li>导入jar包(c3p0-0.9.1.2.jar)</li><li>使用API</li></ol><ul><li><p>a.硬编码(不推荐)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>b.配置文件</p><ul><li>配置文件的名称:c3p0.properties 或者 c3p0-config.xml</li><li>配置文件的路径:src下</li><li>编码</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用默认的配置</span><span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span>String configName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用命名的配置 若配置的名字找不到,使用默认的配置</span></code></pre></li></ul><h3 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h3><blockquote><p>apache组织的一个工具类，JDBC的框架</p></blockquote><h4 id="核心类或接口"><a href="#核心类或接口" class="headerlink" title="核心类或接口"></a>核心类或接口</h4><blockquote><p>QueryRunner：类名</p></blockquote><ul><li>作用：操作sql语句<ul><li>构造器<br>new QueryRunner(Datasource ds);</li><li>注意<br>底层帮我们创建连接,创建语句执行者 ,释放资源.</li><li>常用方法<br>query()<br>update()</li></ul></li></ul><blockquote><p>DBUtils：释放资源，控制事务类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">-</span> <span class="token function">closeQuietly</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>，内部处理了异常<span class="token operator">-</span> <span class="token function">commitAndClose</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span>，提交事务并释放连接</code></pre><blockquote><p>ResultSetHandler：封装结果集</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">-</span> ArrayHandler<span class="token punctuation">,</span> 将查询结果的第一条记录封装成数组<span class="token punctuation">,</span>返回<span class="token operator">-</span> ArrayListHandler<span class="token punctuation">,</span> 将查询结果的每一条记录封装成数组<span class="token punctuation">,</span>将每一个数组放入list中返回<span class="token operator">-</span> BeanHandler<span class="token punctuation">,</span> 将查询结果的第一条记录封装成指定的bean对象<span class="token punctuation">,</span>返回<span class="token operator">-</span> BeanListHandler<span class="token punctuation">,</span> 将查询结果的每一条记录封装成指定的bean对象<span class="token punctuation">,</span>将每一个bean对象放入list中 返回<span class="token punctuation">.</span><span class="token operator">-</span> ColumnListHandler<span class="token punctuation">,</span> 将查询结果的指定一列放入list中返回 <span class="token operator">-</span> MapHandler<span class="token punctuation">,</span> 将查询结果的第一条记录封装成map<span class="token punctuation">,</span>字段名作为key<span class="token punctuation">,</span>值为value 返回<span class="token operator">-</span> MapListHandler<span class="token punctuation">,</span> 将查询结果的每一条记录封装map集合<span class="token punctuation">,</span>将每一个map集合放入list中返回<span class="token operator">-</span> ScalarHandler<span class="token punctuation">,</span>针对于聚合函数 例如<span class="token operator">:</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> 返回的是一个Long值</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解</title>
      <link href="2019/04/07/hou-duan/zhu-jie/"/>
      <url>2019/04/07/hou-duan/zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h1><blockquote><p>注解,jdk5之后提供了一个特性,和类、接口同级<br><a id="more"></a></p></blockquote><ol><li>格式<br> @interface 注解名{}</li><li>作用<ul><li>编译检查</li><li>替代配置文件</li><li>定义注解(元注解:注解上的注解)</li><li>分析代码(用到反射)</li></ul></li><li>java中的3个注解<ul><li>@Override:声明该方法是从分类上继承过来的,执行编译期的检查</li><li>@SuppressWarnings:抑制警告 值有好多,只需要知道一个all抑制所有的警告</li><li>@Deprecated:声明该方法不赞成使用</li></ul></li></ol><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><h2 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a>注解属性</h2><ul><li>注解本质就是一个接口,接口中可以有常量和抽象方法</li><li>抽象方法在注解中就称之为注解属性</li></ul><h2 id="注解属性类型"><a href="#注解属性类型" class="headerlink" title="注解属性类型"></a>注解属性类型</h2><ul><li>基本类型<ul><li>String</li><li>Class</li><li>Annotation</li><li>Enum:枚举<br>以上类型对应的一维数组</li></ul></li></ul><blockquote><p>注意<br>一旦注解有属性了,使用注解的时候必须赋值,(除非这个注解属性有默认值)</p></blockquote><h2 id="赋值的格式"><a href="#赋值的格式" class="headerlink" title="赋值的格式:"></a>赋值的格式:</h2><ul><li>@注解名(属性名=属性值)</li><li>若注解类型为数组,且只有一个值的时候,可以有两种写法<ul><li>方式1:<br>  属性名 = { 值 }</li><li>方式2:<br>  属性名=属性值</li></ul></li><li>若属性名为value的时候,且只需要为这个value属性赋值的时候,value可以省略</li></ul><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><blockquote><p>定义在注解上的注解</p></blockquote><h3 id="Retention-规定注解保留到什么阶段-值为RetentionPolicy的三个枚举值"><a href="#Retention-规定注解保留到什么阶段-值为RetentionPolicy的三个枚举值" class="headerlink" title="@Retention 规定注解保留到什么阶段,值为RetentionPolicy的三个枚举值"></a>@Retention 规定注解保留到什么阶段,值为RetentionPolicy的三个枚举值</h3><ol><li>SOURCE:只在代码中保留,在字节码文件中就删除了</li><li>CLASS:在代码和字节码文件中保留</li><li>RUNTIME:所有阶段都保留</li></ol><h3 id="Target-规定注解作用在什么上面-值为ElementType的枚举值"><a href="#Target-规定注解作用在什么上面-值为ElementType的枚举值" class="headerlink" title="@Target 规定注解作用在什么上面,值为ElementType的枚举值"></a>@Target 规定注解作用在什么上面,值为ElementType的枚举值</h3><ol><li>TYPE:作用在类 接口 等上面</li><li>METHOD:作用方法上面</li><li>FIELD:作用字段上面</li></ol><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><blockquote><p>servlet3.0支持注解开发,没有web.xml这个文件,内嵌了文件上传功能</p></blockquote><h2 id="浏览器端的要求"><a href="#浏览器端的要求" class="headerlink" title="浏览器端的要求:"></a>浏览器端的要求:</h2><p>1.表单的提交方法必须是post<br>2.必须有一个文件上传组件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>3.必须设置表单的enctype=multipart/form-data</p><h2 id="服务器端的要求"><a href="#服务器端的要求" class="headerlink" title="服务器端的要求:"></a>服务器端的要求:</h2><ul><li><p>servlet3.0中,需要在servlet中添加注解</p><blockquote><p>@MultipartConfig</p></blockquote></li><li><p>接受普通上传组件 (除了文件上传组件)</p><pre class=" language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name属性的值<span class="token punctuation">)</span></code></pre></li><li>接受文件上传组件 <pre class=" language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span>name属性的值<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>getName()//获取的name的属性值</li><li>获取文件名:<pre><code>part.getHeader("Content-Disposition")//获取头信息 然后截取</code></pre></li></ul><h2 id="文件上传工具类"><a href="#文件上传工具类" class="headerlink" title="文件上传工具类"></a>文件上传工具类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取随机名称     * @param realName 真实名称     * @return uuid     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUUIDName</span><span class="token punctuation">(</span>String realName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//realname  可能是  1.jpg   也可能是  1</span>        <span class="token comment" spellcheck="true">//获取后缀名</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> realName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>realName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//return null;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件真实名称     * @param name     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getRealName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// c:/upload/1.jpg    1.jpg</span>        <span class="token comment" spellcheck="true">//获取最后一个"/"</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件目录     * @param name 文件名称     * @return 目录     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getDir</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String hex <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>hex<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">-</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            hex<span class="token operator">=</span><span class="token string">"0"</span><span class="token operator">+</span>hex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    System.out.println(hex);</span>        <span class="token keyword">return</span> <span class="token string">"/"</span><span class="token operator">+</span>hex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>hex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><blockquote><p>我们编写的.java文件,jvm会将变成.class文件.该文件要想运行,必须加载内存中,然后会生成一个对象.Class对象</p></blockquote><h2 id="类加载器层次结构"><a href="#类加载器层次结构" class="headerlink" title="类加载器层次结构"></a>类加载器层次结构</h2><table><thead><tr><th>类加载器</th><th>加载对象</th></tr></thead><tbody><tr><td>引导类加载器</td><td>rt.jar</td></tr><tr><td>扩展类加载器</td><td>ext/*.jar</td></tr><tr><td>应用类加载器</td><td>我们自己编写类</td></tr></tbody></table><h2 id="全盘负责委托机制"><a href="#全盘负责委托机制" class="headerlink" title="全盘负责委托机制:"></a>全盘负责委托机制:</h2><ol><li>当一个类运行的时候,有可能有其他类,应用类加载器询问扩展类加载器:你加载过这些类吗?</li><li>扩展类加载器在向上问(引导类加载器):你加载过这些类吗?</li><li>引导类加载器:我查查,有一个是我负责,我加载.</li><li>扩展类加载器:接下来我来查,有几个是我负责,我加载,还有几个类我已经加载完成了,你可以直接使用</li><li>应用类加载器:收到了,剩下的我来</li></ol><h1 id="统一编码"><a href="#统一编码" class="headerlink" title="统一编码"></a>统一编码</h1><blockquote><p>方法加强:静态代理,动态代理</p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ol><li>要求被装饰者和装饰者实现同一个接口或者继承同一个类</li><li>在装饰者中要有被装饰者的引用</li><li>对需要加强的方法进行加强</li><li>对不需要加强的方法调用原来的方法</li></ol><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理:"></a>动态代理:</h2><h3 id="在项目运行的时候才创建一个代理对象-对方法进行增强-控制"><a href="#在项目运行的时候才创建一个代理对象-对方法进行增强-控制" class="headerlink" title="在项目运行的时候才创建一个代理对象,对方法进行增强(控制)"></a>在项目运行的时候才创建一个代理对象,对方法进行增强(控制)</h3><ul><li>方式1:<br>  jdk中Proxy类,前提:实现接口</li><li>方式2:<br>  spring中cglib,前提:继承类</li></ul><h3 id="动态的在内存中创建一个代理对象"><a href="#动态的在内存中创建一个代理对象" class="headerlink" title="动态的在内存中创建一个代理对象"></a>动态的在内存中创建一个代理对象</h3><pre class=" language-java"><code class="language-java">Object Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> InvocationHandler h<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*参数说明:    ClassLoader:代理对象类加载器 一般我们使用的是被代理对象的类加载器    Class[]:代理对象需要实现接口 一般我们使用的是被代理对象所实现的所有接口    InvocationHandler:执行处理类.在这里面对方法进行加强*/</span></code></pre><p>invocationHandler中只有一个方法</p><pre class=" language-java"><code class="language-java">Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*参数说明:    proxy:代理对象    method:当前执行的方法    args:当前方法执行的时候所需要的参数    返回值:就是当前method对象执行的返回值*/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annotation </tag>
            
            <tag> servlet3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>designpatterns</title>
      <link href="2019/04/07/hou-duan/designpatterns/"/>
      <url>2019/04/07/hou-duan/designpatterns/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><ol><li>要求装饰者和被装饰者实现同一个接口或者继承同一个类</li><li>装饰者中要有被装饰者的引用</li><li>对需要加强方法进行加强</li><li>对不需要加强的方法调用原来的方法即可</li></ol><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听器&amp;过滤器</title>
      <link href="2019/04/06/hou-duan/listener-filter/"/>
      <url>2019/04/06/hou-duan/listener-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><blockquote><p>监听器</p></blockquote><p>1.作用:<br>    监听web中中的域对象 ServletContext ServletRequest HttpSession<br><a id="more"></a><br>2.监听内容:</p><pre><code>- 监听三个对象的创建和销毁- 监听三个对象属性的变化- 监听session中javabean的状态</code></pre><p>3.注意:listener全部是接口</p><h2 id="监听三个对象的创建和销毁"><a href="#监听三个对象的创建和销毁" class="headerlink" title="监听三个对象的创建和销毁"></a>监听三个对象的创建和销毁</h2><ul><li>ServletContextListener<ul><li>创建:服务器启动的时候,会为每一个项目都创建一个servletContext</li><li>销毁:服务器关闭的时候,或者项目被移除的时候</li></ul></li><li>ServletRequestListener<ul><li>创建:请求来的时候</li><li>销毁:响应生成的时候</li></ul></li><li>HttpSessionListener<ul><li>创建:<ul><li>java中第一次调用request.getSession的时候</li><li>jsp访问的时候创建</li></ul></li><li>销毁:<ul><li>三种情况:<br>  session超时<br>  手动销毁session<br>  服务器非正常关闭</li></ul></li></ul></li></ul><h2 id="监听三个对象属性的变化-添加-替换-删除"><a href="#监听三个对象属性的变化-添加-替换-删除" class="headerlink" title="监听三个对象属性的变化(添加 替换 删除)"></a>监听三个对象属性的变化(添加 替换 删除)</h2><p>ServletContextAttributeListener<br>ServletRequestAttributeListener<br>HttpSessionAttributeListener</p><h2 id="监听session中javabean的状态"><a href="#监听session中javabean的状态" class="headerlink" title="监听session中javabean的状态"></a>监听session中javabean的状态</h2><blockquote><p>注意:这两个接口需要javabean实现.是让javabean感知到自己的状态</p></blockquote><h3 id="HttpSessionBindingListener-绑定和解绑"><a href="#HttpSessionBindingListener-绑定和解绑" class="headerlink" title="HttpSessionBindingListener(绑定和解绑)"></a>HttpSessionBindingListener(绑定和解绑)</h3><blockquote><p>检测java是否添加到session或者从session中移除</p></blockquote><h3 id="HttpSessionActivationListener-钝化和活化"><a href="#HttpSessionActivationListener-钝化和活化" class="headerlink" title="HttpSessionActivationListener(钝化和活化)"></a>HttpSessionActivationListener(钝化和活化)</h3><ul><li>钝化:javabean从session中序列化到磁盘上</li><li>活化:javabean从磁盘上加载到了session中<ul><li>可以通过配置文件修改javabean什么时候钝化</li><li>在项目下/meta-info创建一个context.xml<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  maxIdleSwap    :1分钟 如果session不使用就会序列化到硬盘.  directory    :序列化到硬盘的文件存放的位置.--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Manager</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.session.PersistentManager<span class="token punctuation">"</span></span> <span class="token attr-name">maxIdleSwap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Store</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.catalina.session.FileStore<span class="token punctuation">"</span></span> <span class="token attr-name">directory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Manager</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ul><h1 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter(过滤器)"></a>Filter(过滤器)</h1><blockquote><p>Filter是一个接口,过滤请求和响应</p></blockquote><ul><li>自动登录</li><li>统一编码</li><li>过滤关键字</li><li>…</li></ul><h2 id="Filter接口的方法"><a href="#Filter接口的方法" class="headerlink" title="Filter接口的方法"></a>Filter接口的方法</h2><ul><li>init(FilterConfig config):初始化操作</li><li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain):处理业务逻辑</li><li>destroy():销毁操作</li></ul><h2 id="filter的生命周期"><a href="#filter的生命周期" class="headerlink" title="filter的生命周期"></a>filter的生命周期</h2><blockquote><p>filter单实例多线程</p></blockquote><ul><li>filter在服务器启动的时候 服务器创建filter 调用init方法 实现初始化操作</li><li>请求来的时候,创建一个线程 根据路径调用dofilter 执行业务逻辑</li><li>当filter被移除的时候或者服务器正常关闭的时候 调用destory方法 执行销毁操作.</li></ul><h2 id="FilterChain-过滤链"><a href="#FilterChain-过滤链" class="headerlink" title="FilterChain:过滤链"></a>FilterChain:过滤链</h2><ul><li>通过chain的dofilter方法,可以将请求放行到下一个过滤器,直到最后一个过滤器放行才可以访问到servlet|jsp<br>-doFilter()放行方法</li></ul><h2 id="★url-pattern配置"><a href="#★url-pattern配置" class="headerlink" title="★url-pattern配置"></a>★url-pattern配置</h2><blockquote><p>一个资源有可能被多个过滤器匹配成功,多个过滤器的执行顺序是按照web.xml中filter-mapping的顺序执行的</p></blockquote><table><thead><tr><th style="text-align:center">匹配方式</th><th style="text-align:center">要求</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">完全匹配</td><td style="text-align:center">必须以”/“ 开始</td><td style="text-align:center">例如: /a/b</td></tr><tr><td style="text-align:center">目录匹配</td><td style="text-align:center">必须以”/“ 开始,以”*“结束</td><td style="text-align:center">例如:/a/b/*</td></tr><tr><td style="text-align:center">后缀名匹配</td><td style="text-align:center">以”*.”开始,以字符结束</td><td style="text-align:center">例如 :  *.jsp,*.do,*.action</td></tr></tbody></table><h2 id="filterConfig"><a href="#filterConfig" class="headerlink" title="filterConfig"></a>filterConfig</h2><blockquote><p>过滤器的配置对象</p></blockquote><ul><li>获取全局管理者</li><li>获取当前filter的名称</li><li>获取当前filter的初始化参数</li></ul><h2 id="filter-mapping的子标签"><a href="#filter-mapping的子标签" class="headerlink" title="filter-mapping的子标签"></a>filter-mapping的子标签</h2><h3 id="servlet-name"><a href="#servlet-name" class="headerlink" title="servlet-name"></a>servlet-name</h3><blockquote><p>匹配哪个servlet 值写的是serlvet标签中servlet-name的值</p></blockquote><p>建议:不要在一个filter中重复的匹配servlet</p><h3 id="dispatcher"><a href="#dispatcher" class="headerlink" title="dispatcher"></a>dispatcher</h3><blockquote><p>匹配哪种请求(默认的是REQUEST,一旦显式的写出来哪种请求,默认就不起作用了)</p></blockquote><ul><li>REQUEST:从浏览器发送过来的请求(默认)</li><li>FORWARD:转发过来的请求</li><li>ERROR:因服务器错误而发送过来的请求</li><li>INCLUDE:包含过来的请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filter </tag>
            
            <tag> listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax&amp;Json</title>
      <link href="2019/04/05/qian-duan/ajax/"/>
      <url>2019/04/05/qian-duan/ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><blockquote><p>Asynchronous Javascript And XML(异步JavaScript和XML)</p></blockquote><p>AJAX 是一种用于创建快速动态网页的技术,通过在后台与服务器进行少量数据交换,AJAX可以使网页实现异步更新.这意味着可以在不重新加载整个网页的情况下,对网页的某部分进行更新.传统的网页(不使用 AJAX)如果需要更新内容，必须重载整个网页页面。<br><a id="more"></a></p><blockquote><p>Ajax入门程序</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.创建核心对象</span>xmlhttp <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// code for Firefox, Opera, IE7, etc.</span>    xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveXObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// code for IE6, IE5</span>    xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2.编写回调函数</span>xmlhttp<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.open 设置请求方式和请求路径</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"请求方式"</span><span class="token punctuation">,</span> <span class="token string">"请求路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置请求头</span>xmlhttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.send 发送请求</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>四种请求方式</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//第一种</span>jquery对象<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">-</span> 发送<span class="token keyword">get</span>请求的ajax<span class="token comment" spellcheck="true">//第三种</span>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>数据<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">-</span> 发送post请求的ajax<span class="token comment" spellcheck="true">//第四种</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">-</span> 选项的可选值<span class="token punctuation">:</span>        <span class="token operator">-</span> url<span class="token punctuation">:</span>请求路径        <span class="token operator">-</span> type<span class="token punctuation">:</span>请求方法        <span class="token operator">-</span> data<span class="token punctuation">:</span>发送到服务器的数据        <span class="token operator">-</span> success<span class="token punctuation">:</span>fn 成功以后的回调        <span class="token operator">-</span> error<span class="token punctuation">:</span>fn 异常之后的回调        <span class="token operator">-</span> dataType<span class="token punctuation">:</span>返回内容格式 经常使用json        <span class="token operator">-</span> <span class="token keyword">async</span><span class="token punctuation">:</span>设置是否是异步请求</code></pre><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><blockquote><p>JSON(JavaScript Object Notation)<br>是一种轻量级的数据交换格式,它是基于ECMAScript的一个子集。</p></blockquote><pre class=" language-java"><code class="language-java">JSONArray<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//数组和list  </span>JSONObject<span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//bean和map</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> Json </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC</title>
      <link href="2019/04/02/hou-duan/mvc/"/>
      <url>2019/04/02/hou-duan/mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h1><p>就是将业务逻辑,代码,显示相分离的一种思想<br><a id="more"></a></p><ul><li>M:model 模型 作用:主要是封装数据,封装对数据的访问</li><li>V:view     视图 作用:主要是用来展示数据 一般是jsp担任的</li><li>C:ctrl    控制 作用:接受请求,找到相应的javabean完成业务逻辑</li></ul><h1 id="javaee的三层架构"><a href="#javaee的三层架构" class="headerlink" title="javaee的三层架构"></a>javaee的三层架构</h1><h2 id="1-web层"><a href="#1-web层" class="headerlink" title="1.web层"></a>1.web层</h2><ul><li>作用<br>  展示数据 —-jsp</li><li>servlet<br>接受请求<br>找到对应的service,调用方法 完成逻辑操作<br>信息生成或者页面跳转</li></ul><h2 id="2-service业务层"><a href="#2-service业务层" class="headerlink" title="2.service业务层"></a>2.service业务层</h2><ul><li>作用<ul><li>完成业务操作</li><li>调用dao</li></ul></li></ul><h2 id="3-dao层-data-access-object-数据访问对象"><a href="#3-dao层-data-access-object-数据访问对象" class="headerlink" title="3.dao层(data access object 数据访问对象)"></a>3.dao层(data access object 数据访问对象)</h2><ul><li>作用<ul><li>对数据库的curd操作</li></ul></li></ul><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="1-事务的特性"><a href="#1-事务的特性" class="headerlink" title="1.事务的特性"></a>1.事务的特性</h2><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>原子性(A)</td><td>事务里面的操作单元不可切割,要么全部成功,要么全部失败</td></tr><tr><td>一致性(C)</td><td>事务执行前后,业务状态和其他业务状态保持一致</td></tr><tr><td>隔离性(I)</td><td>一个事务执行的时候最好不要受到其他事务的影响</td></tr><tr><td>持久性(D)</td><td>一旦事务提交或者回滚.这个状态都要持久化到数据库中</td></tr></tbody></table><h2 id="2-不考虑隔离性会出现的读问题"><a href="#2-不考虑隔离性会出现的读问题" class="headerlink" title="2.不考虑隔离性会出现的读问题"></a>2.不考虑隔离性会出现的读问题</h2><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>在一个事务中读取到另一个事务没有提交的数据</td></tr><tr><td>不可重复读</td><td>在一个事务中,两次查询的结果不一致(针对的update操作)</td></tr><tr><td>虚读(幻读)</td><td>在一个事务中,两次查询的结果不一致(针对的insert操作)</td></tr></tbody></table><h2 id="3-通过设置数据库的隔离级别来避免上面的问题"><a href="#3-通过设置数据库的隔离级别来避免上面的问题" class="headerlink" title="3.通过设置数据库的隔离级别来避免上面的问题"></a>3.通过设置数据库的隔离级别来避免上面的问题</h2><table><thead><tr><th>隔离级别</th><th>意思</th><th>描述</th></tr></thead><tbody><tr><td>read uncommitted</td><td>读未提交</td><td>上面的三个问题都会出现</td></tr><tr><td>read committed</td><td>读已提交</td><td>可以避免脏读的发生</td></tr><tr><td>repeatable read</td><td>可重复读</td><td>可以避免脏读和不可重复读的发生</td></tr><tr><td>serializable</td><td>串行化</td><td>可以避免所有的问题</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp&amp;el&amp;jstl</title>
      <link href="2019/03/31/qian-duan/jsp-el-jstl/"/>
      <url>2019/03/31/qian-duan/jsp-el-jstl/</url>
      
        <content type="html"><![CDATA[<h1 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h1><h2 id="Java-Server-Pages-Java服务器页面"><a href="#Java-Server-Pages-Java服务器页面" class="headerlink" title="Java Server Pages(Java服务器页面)"></a>Java Server Pages(Java服务器页面)</h2><blockquote><p>本质上jsp就是一个Servlet，在html代码中嵌套java代码，运行在服务器端,处理请求，生成动态内容。产生的java文件和class保留在tomcat的word目录下。</p></blockquote><a id="more"></a><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程:"></a>执行流程:</h2><ol><li>浏览器发送请求,访问jsp页面</li><li>服务器接受请求,jspSerlvet会帮我们查找对应的jsp文件</li><li>服务器将jsp页面翻译成java文件</li><li>jvm会将java编译成.class文件</li><li>服务器运行class文件,生成动态的内容</li><li>将内容发送给服务器</li><li>服务器组成响应信息,发送给浏览器</li><li>浏览器接受数据,解析展示</li></ol><h2 id="jsp的脚本"><a href="#jsp的脚本" class="headerlink" title="jsp的脚本:"></a>jsp的脚本:</h2><ul><li>&lt;%…%&gt; java程序片段<br>  生成成jsp的service方法中</li><li>&lt;%=…%&gt; 输出表达式<br>  生成成jsp的service方法中,相当于在java中调用out.print(..)</li><li>&lt;%!…%&gt; 声明成员<br>  成员位置</li></ul><h2 id="jsp的指令"><a href="#jsp的指令" class="headerlink" title="jsp的指令"></a>jsp的指令</h2><blockquote><p>声明jsp页面的一些属性和动作</p></blockquote><ul><li><p>格式:</p><pre><code>&lt;%@指令名称 属性="值" 属性="值"%&gt;</code></pre></li><li><p>jsp指令的分类:</p><ul><li>page:主要声明jsp页面的一些属性</li><li>include:静态包含</li><li>taglib:导入标签库</li></ul></li><li>注意:<ul><li>一个页面中可以出现多个指令</li><li>指令可以放在任意位置,一般都放在jsp页面最上面</li></ul></li></ul><h2 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h2><h3 id="1-重要属性"><a href="#1-重要属性" class="headerlink" title="1.重要属性:"></a>1.重要属性:</h3><ul><li>contentType:设置响应流的编码,及通知浏览器用什么编码打开.设置文件的mimetype</li><li>pageEncoding:设置页面的编码</li><li><p>import:导入所需要的包</p></li><li><p>contentType和pageEncoding联系:</p><ul><li>若两者都出现的时候,各自使用各自的编码</li><li>若只出现一者,两个都使用出现的这个编码</li><li>若两者都不出现,使用服务器默认的编码 tomcat7使用的iso-8859-1</li></ul></li></ul><h3 id="2-其他属性"><a href="#2-其他属性" class="headerlink" title="2.其他属性:"></a>2.其他属性:</h3><ul><li>language:当前jsp页面里面可以嵌套的语言(现在只能是java)</li><li>buffer:设置jsp页面的流的缓冲区的大小</li><li>autoFlush:是否自动刷新(默认自动刷新)</li><li>extends:声明当前jsp的页面继承于那个类.必须继承的是httpservlet及其子类</li><li>session:设置jsp页面是否可以使用session内置对象</li><li>isELIgnored:是否忽略el表达式</li><li>errorPage:当前jsp页面出现异常的时候要跳转到的jsp页面</li><li>isErrorPage:当前jsp页面是否是一个错误页面<ul><li>若值为true,可以使用jsp页面的一个内置对象 exception</li></ul></li></ul><h3 id="3-include指令"><a href="#3-include指令" class="headerlink" title="3.include指令:"></a>3.include指令:</h3><blockquote><p>静态包含,就是将其他页面或者servlet的内容包含进来,一起进行编译运行.生成一个java文件.</p></blockquote><ul><li><p>格式:</p><pre><code>&lt;%@include file="相对路径或者是内部路径" %&gt;</code></pre></li><li><p>路径:</p><ul><li>相对路径:<ul><li>./或者什么都不写 当前路径</li><li>上一级路径  ../</li></ul></li><li>绝对路径:<ul><li>带协议和主机的绝对路径</li><li>不带协议和主机的绝对路径</li><li>/项目名/资源</li></ul></li><li>内部路径(请求转发 静态包含 动态包含):<ul><li>不带协议和主机的绝对路径去掉项目名</li></ul></li></ul></li></ul><h3 id="4-taglib指令"><a href="#4-taglib指令" class="headerlink" title="4.taglib指令"></a>4.taglib指令</h3><blockquote><p>导入标签库    </p></blockquote><pre><code>&lt;%@taglib prefix="前缀名" uri="名称空间" %&gt;</code></pre><h2 id="jsp的内置对象-9大内置对象"><a href="#jsp的内置对象-9大内置对象" class="headerlink" title="jsp的内置对象(9大内置对象)"></a>jsp的内置对象(9大内置对象)</h2><blockquote><p>在jsp页面上可以直接使用的对象</p></blockquote><table><thead><tr><th style="text-align:center">内置对象</th><th style="text-align:center">类型</th></tr></thead><tbody><tr><td style="text-align:center">out</td><td style="text-align:center">JspWriter</td></tr><tr><td style="text-align:center">request</td><td style="text-align:center">HttpServletRequest</td></tr><tr><td style="text-align:center">response</td><td style="text-align:center">HttpServletResponse</td></tr><tr><td style="text-align:center">session</td><td style="text-align:center">HttpSession</td></tr><tr><td style="text-align:center">exception</td><td style="text-align:center">Throwable</td></tr><tr><td style="text-align:center">page</td><td style="text-align:center">Servlet(this)</td></tr><tr><td style="text-align:center">config</td><td style="text-align:center">ServletConfig</td></tr><tr><td style="text-align:center">application</td><td style="text-align:center">ServletContext</td></tr><tr><td style="text-align:center">pageContext</td><td style="text-align:center">PageContext</td></tr></tbody></table><h2 id="jsp的域对象"><a href="#jsp的域对象" class="headerlink" title="jsp的域对象"></a>jsp的域对象</h2><table><thead><tr><th style="text-align:center">域对象</th><th style="text-align:center">作用域</th></tr></thead><tbody><tr><td style="text-align:center">application</td><td style="text-align:center">整个项目</td></tr><tr><td style="text-align:center">session</td><td style="text-align:center">一次会话</td></tr><tr><td style="text-align:center">request</td><td style="text-align:center">一次请求</td></tr><tr><td style="text-align:center">pageContext</td><td style="text-align:center">一个页面</td></tr></tbody></table><h2 id="pagecontext作用"><a href="#pagecontext作用" class="headerlink" title="pagecontext作用"></a>pagecontext作用</h2><blockquote><p>xxxAttribute(…,int scope);</p></blockquote><ul><li>scope取值:<ul><li>APPLICATION_SCOPE </li><li>SESSION_SCOPE </li><li>REQUEST_SCOPE </li><li>PAGE_SCOPE </li></ul></li></ul><h3 id="获取其他的内置对象"><a href="#获取其他的内置对象" class="headerlink" title="获取其他的内置对象"></a>获取其他的内置对象</h3><blockquote><p>getXxx()</p></blockquote><ul><li>注意:<br>  getRequest():获取request内置对象</li></ul><h3 id="便捷查找"><a href="#便捷查找" class="headerlink" title="便捷查找"></a>便捷查找</h3><h4 id="findAttribute-String-key"><a href="#findAttribute-String-key" class="headerlink" title="findAttribute(String key):"></a>findAttribute(String key):</h4><blockquote><p>依次从pagecontext,request,session,application四个域中<strong>(从小到大)</strong>,查找相应的属性,若查找到了返回值,且结束该次查找,若查找不到,返回null</p></blockquote><h2 id="jsp的动作标签"><a href="#jsp的动作标签" class="headerlink" title="jsp的动作标签"></a>jsp的动作标签</h2><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>jsp<span class="token operator">:</span>forward<span class="token operator">></span></code></pre><p>相当于java中<strong>request.getRequestDispatcher(..).forward(..);</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>jsp<span class="token operator">:</span>forward page<span class="token operator">=</span><span class="token string">"内部路径"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>forward<span class="token operator">></span></code></pre><h3 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h3><pre><code>&lt;jsp:include&gt;就是将被包含页面或者servlet的运行结果包含到当前页面中.</code></pre><h2 id="jsp注释"><a href="#jsp注释" class="headerlink" title="jsp注释"></a>jsp注释</h2><ul><li>html注释 <!--  --><ul><li>注释的内容只在页面上看不到  java代码和html源代码都有</li></ul></li><li>java注释 <ul><li>只在java代码中存在</li></ul></li><li>jsp注释 &lt;%–  –%&gt;<ul><li>只在jsp页面中存在,翻译成java文件之后就没有了</li></ul></li></ul><h1 id="el-Expression-Language"><a href="#el-Expression-Language" class="headerlink" title="el(Expression Language)"></a>el(Expression Language)</h1><blockquote><p>jsp的内置表达式语言,从jsp2.0开始,用来替代&lt;%=..%&gt;</p></blockquote><p>1.作用</p><pre><code>- 获取域中数据 ★- 执行运算 ★- 获取常见的web对象- 调用java的方法</code></pre><p>2.格式:</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>el表达式<span class="token punctuation">}</span></code></pre><h2 id="获取域中数据-★"><a href="#获取域中数据-★" class="headerlink" title="获取域中数据:★"></a>获取域中数据:★</h2><h3 id="获取简单数据"><a href="#获取简单数据" class="headerlink" title="获取简单数据"></a>获取简单数据</h3><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>pageScope<span class="token operator">|</span>requestScope<span class="token operator">|</span>sessionScope<span class="token operator">|</span>applicationScope<span class="token punctuation">.</span>属性名<span class="token punctuation">}</span></code></pre><p><strong>经常使用:</strong></p><blockquote><p>${属性名}:依次从pageContext,request,session,application查找指定属性,若查找到返回值,结束该次查找,若查找不到,返回””</p></blockquote><h3 id="获取复杂数据"><a href="#获取复杂数据" class="headerlink" title="获取复杂数据"></a>获取复杂数据</h3><ul><li><p>获取数组中的数据</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>域中的名称<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>获取list中的数据</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>域中的名称<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li><li><p>获取map中的数据</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>域中的名称<span class="token punctuation">.</span>键名<span class="token punctuation">}</span></code></pre></li></ul><h3 id="注意-★"><a href="#注意-★" class="headerlink" title="注意:★"></a>注意:★</h3><blockquote><p>若属性名中出现了”.”|”+”|”-“等特殊符号,需要使用scope获取</p></blockquote><p>例如:</p><pre><code>${requestScope["arr.age"] }</code></pre><h3 id="javabean导航"><a href="#javabean导航" class="headerlink" title="javabean导航"></a>javabean导航</h3><p>1.javabean</p><blockquote><p>java语言编写的一个可重用的组件,狭义上来说就是我们编写的一个普通的java类 例如:User Person </p></blockquote><p>2.javabean规范</p><ul><li><p>必须是一个公共的具体的类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span></code></pre></li><li><p>提供私有的字段</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//id称之为字段</span></code></pre></li><li><p>提供公共访问字段的方法 get|set|is方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li><li><p>一旦有公共的方法之后,get|set|is之后的内容,将首字母小写,将这个东西称之为bean属性,<strong>id就是一个bean属性</strong></p><ul><li>提供一个无参的构造器</li><li>一般实现序列化接口<strong>serializable</strong></li></ul></li></ul><h2 id="el的内置对象"><a href="#el的内置对象" class="headerlink" title="el的内置对象"></a>el的内置对象</h2><ul><li>pageScope</li><li>requestScope</li><li>sessionScope</li><li>applicationScope</li></ul><h3 id="和参数相关的el内置对象"><a href="#和参数相关的el内置对象" class="headerlink" title="和参数相关的el内置对象"></a>和参数相关的el内置对象</h3><ul><li>param</li><li>paramValues</li></ul><h3 id="和请求头相关的el内置对象"><a href="#和请求头相关的el内置对象" class="headerlink" title="和请求头相关的el内置对象"></a>和请求头相关的el内置对象</h3><ul><li>header</li><li>haederValues</li></ul><h3 id="和全局初始化参数相关的el内置对象"><a href="#和全局初始化参数相关的el内置对象" class="headerlink" title="和全局初始化参数相关的el内置对象"></a>和全局初始化参数相关的el内置对象</h3><ul><li>initParam</li></ul><h3 id="cookie内置对象"><a href="#cookie内置对象" class="headerlink" title="cookie内置对象"></a>cookie内置对象</h3><h4 id="cookie-获取map-key-Cookie"><a href="#cookie-获取map-key-Cookie" class="headerlink" title="${cookie} 获取map{key=Cookie}"></a>${cookie} 获取map{key=Cookie}</h4><ul><li><p>创建cookie</p><pre class=" language-java"><code class="language-java">Cookie c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过${cookie}获取相当于</p><pre class=" language-java"><code class="language-java">username<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//相当于map的key是cookie的键,map的value是当前cookie</span></code></pre></li><li><p>若想获取名称username的cookie的value值(获取tom)</p><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>cookie<span class="token punctuation">.</span>username<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//javabean导航</span></code></pre></li><li><p>注意</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//java中Cookie的api</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取cookie的名称</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取cookie的value值</span></code></pre></li><li><p>我们称name和value是cookie的bean属性</p></li></ul><h4 id="使用cookie内置对象"><a href="#使用cookie内置对象" class="headerlink" title="使用cookie内置对象"></a>使用cookie内置对象</h4><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>cookie<span class="token punctuation">.</span>给cookie起名字<span class="token punctuation">.</span>value<span class="token punctuation">}</span></code></pre><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取jsession的值</span>$<span class="token punctuation">{</span>cookie<span class="token punctuation">.</span>JSESSIONID<span class="token punctuation">.</span>value<span class="token punctuation">}</span></code></pre><h3 id="pageContext内置对象"><a href="#pageContext内置对象" class="headerlink" title="pageContext内置对象"></a>pageContext内置对象</h3><blockquote><p>获取不是map集合,相当于jsp的pageContext内置对象,在jsp页面中获取项目名</p></blockquote><pre class=" language-java"><code class="language-java">$<span class="token punctuation">{</span>pageContext<span class="token punctuation">.</span>request<span class="token punctuation">.</span>contextPath<span class="token punctuation">}</span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>除了pagecontext其余对象获取的全是map集合</p></blockquote><h1 id="jstl-jsp标准的标签库语言"><a href="#jstl-jsp标准的标签库语言" class="headerlink" title="jstl(jsp标准的标签库语言)"></a>jstl(jsp标准的标签库语言)</h1><blockquote><p>apache的用来替代java脚本</p></blockquote><p>使用步骤:</p><ul><li>导入jar包 (jstl.jar和standard.jar)</li><li>在页面上导入标签库<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token annotation punctuation">@taglib</span> prefix<span class="token operator">=</span><span class="token string">""</span> uri<span class="token operator">=</span><span class="token string">""</span><span class="token operator">%</span><span class="token operator">></span></code></pre></li></ul><h2 id="jstl的分类"><a href="#jstl的分类" class="headerlink" title="jstl的分类:"></a>jstl的分类:</h2><ul><li>core:核心类库 ★</li><li>fmt:格式化|国际化</li><li>xml:过时了</li><li>sql:过时了</li><li>函数库:很少使用<h3 id="core"><a href="#core" class="headerlink" title="core:"></a>core:</h3></li><li>c:if★</li><li>c:forEach★</li><li>c:set 往域中设置值</li><li>c:choose c:when c:otherwise 分支</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> jsp </tag>
            
            <tag> el </tag>
            
            <tag> jstl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie&amp;Session</title>
      <link href="2019/03/30/hou-duan/cookie-session/"/>
      <url>2019/03/30/hou-duan/cookie-session/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookie-浏览器端会话技术"><a href="#Cookie-浏览器端会话技术" class="headerlink" title="Cookie(浏览器端会话技术)"></a>Cookie(浏览器端会话技术)</h1><p>cookie是由服务器生成,通过response将cookie写回浏览器(set-cookie),保留在浏览器上,下一次访问,浏览器根据一定的规则携带不同的cookie(通过request的头 cookie),服务器就可以接受cookie<br><a id="more"></a></p><ul><li>cookie的api:<br>  new Cookie(String key,String value)</li><li>写回浏览器:<br>  response.addCookie(Cookie c)</li><li>获取cookie:<br>  Cookie[] request.getCookies()</li><li>cookie的常用方法:<br>  getName():获取cookie的key(名称)<br>  getValue():获取指定cookie的值</li><li>注意:<br>  cookie不能跨浏览器<br>  cookie中不支持中文</li></ul><h1 id="session-服务器端会话技术"><a href="#session-服务器端会话技术" class="headerlink" title="session(服务器端会话技术)"></a>session(服务器端会话技术)</h1><h2 id="当第一次访问的服务器的时候-服务器获取id"><a href="#当第一次访问的服务器的时候-服务器获取id" class="headerlink" title="当第一次访问的服务器的时候,服务器获取id"></a>当第一次访问的服务器的时候,服务器获取id</h2><ul><li>能获取id<br>  要拿着这个id去服务器中查找有无此session<ul><li>若查找到了:直接拿过来时候,将数据保存,需要将当前sessin的id返回给浏览器</li><li>若查找不到:创建一个session,将你的数据保存到这个session中,将当前session的id返回给浏览器</li></ul></li><li>不能获取id<br>  创建一个session,将你的数据保存到这个session中,将当前session的id返回给浏览器</li></ul><h2 id="获取一个session"><a href="#获取一个session" class="headerlink" title="获取一个session"></a>获取一个session</h2><pre class=" language-java"><code class="language-java">HttpSession request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h2><h3 id="调用方法-xxxAttribute"><a href="#调用方法-xxxAttribute" class="headerlink" title="调用方法:xxxAttribute()"></a>调用方法:xxxAttribute()</h3><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期:"></a>生命周期:</h3><ul><li>创建:第一次调用request.getsession()创建</li><li>销毁:<ul><li>服务器非正常关闭<ul><li>session超时<br>默认时间超时:30分钟  web.xml有配置<br>手动设置超时:setMaxInactiveInterval(int 秒)</li></ul></li><li>手动销毁session<br>  session.invalidate()</li></ul></li></ul><h3 id="存放私有的数据"><a href="#存放私有的数据" class="headerlink" title="存放私有的数据."></a>存放私有的数据.</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BookManage</title>
      <link href="2019/03/29/qi-ta/bookmanage/"/>
      <url>2019/03/29/qi-ta/bookmanage/</url>
      
        <content type="html"><![CDATA[<h1 id="一-开发环境"><a href="#一-开发环境" class="headerlink" title="一. 开发环境"></a>一. 开发环境</h1><pre><code>eclipse + widowbuilder</code></pre><a id="more"></a><h1 id="二-涉及到的技术"><a href="#二-涉及到的技术" class="headerlink" title="二.涉及到的技术"></a>二.涉及到的技术</h1><h2 id="Java-MVC模式"><a href="#Java-MVC模式" class="headerlink" title="Java MVC模式"></a>Java MVC模式</h2><ul><li>Swing</li><li>MySQL</li><li>JDBC</li></ul><h3 id="Java-MVC模式-1"><a href="#Java-MVC模式-1" class="headerlink" title="Java MVC模式"></a>Java MVC模式</h3><p>M——Model（模型）。用于处理应用程序数据逻辑的部分。建立相关的类来连接数据库存储数据，例如用户类，图书类，图书类别类，把能够抽象化成一个一个的类写在这一部分<br>V——View（视图）。所有用户看到的界面，写在这一部分。这次用windowbuilder的这一插件来写视图<br>C——Contraller(控制器)。这部分主要是用来连接Model和View这两部分的，关于用户交互的操作的方法函数写在这一部分</p><p>首先，创建了几个包用来写不同模块的代码！<br>com.luo.Model一个包用来写Model这一模块<br>com.luo.View一个包用来写View这一模块<br>com.luo.Dao一个包用来写Controller这一模块<br>另外，还创建com.luo.Util一个包用来封装相关的工具类，例如我们会重复需要连接数据库，这时候就先封装好一个连接数据库的那一部分的 工具类。后面连接起来就方便多了。<br>com.luo.Image这个包是用来存放项目中用到的图标和图片<br><a href="http://www.easyicon.net/" target="_blank" rel="noopener">http://www.easyicon.net/</a> —&gt; 用来找图标的网站</p><h2 id="MySQL部分"><a href="#MySQL部分" class="headerlink" title="MySQL部分"></a>MySQL部分</h2><p><strong> 关联了bookTypeId和Id </strong><br>也就是说BookType数据库的id 代表着 Book中类别的Id，例如类型1，类型7，其中1和7就是BookType中的id<br>在com.luo.Util中封装了连接数据库的一个DbUtil类<br>首先需要4个成员变量：</p><ul><li>数据库的名字，”jdbc:mysql://localhost:3306/（这里写数据库的名字）”</li><li>MySQL的用户名</li><li>MySQL的密码</li><li>JDBC驱动的名字 “com.mysql.jdbc.Driver”</li></ul><p>接下来是连接数据库的方法函数</p><ul><li>通过Class调用forName()</li><li>然后通过DriverManager调用getConnection()</li><li>最后返回一个Connection类型值</li><li>还有关闭数据库的方法函数</li><li>通过传入的Connection类型的值调用Close()</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 连接数据库工具 * @author Administrator * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbUtil</span> <span class="token punctuation">{</span><span class="token keyword">private</span> String dbUrl <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/db_book"</span><span class="token punctuation">;</span><span class="token keyword">private</span> String UserName <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token keyword">private</span> String Password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token keyword">private</span> String jdbcName <span class="token operator">=</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 连接数据库 * @return * @throws Exception */</span><span class="token keyword">public</span> Connection <span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>jdbcName<span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>dbUrl<span class="token punctuation">,</span> UserName<span class="token punctuation">,</span> Password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 关闭数据库 * @param conn * @throws Exception */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Closecon</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Model模块"><a href="#Model模块" class="headerlink" title="Model模块"></a>Model模块</h2><p>这次的小项目分别建立了User类，Book类和BookType类。其中，后面需要用到这些类的构造方法传入参数，所以注意，要构造一个不带参数的构造函数，这样后面就可以new一个空的类了。</p><p>以下是其中一个用户类的代码，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//不带参数的构造函数</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String userName<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//带两个参数的构造函数</span>    <span class="token comment" spellcheck="true">/**********************************     分别创建成员变量get（）和set（）方法    ***********************************/</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还有一点，BooType类中<strong>重写了toString()</strong>的方法。当把BookType类的对象当作参数传进去，显示出来的并不是它里面的数据，而是它的地址。所以重写toString()方法来显示BookType类的对象里面的数据<br>后面只需用到BookType类中的一个成员变量BookTypeName</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> BookTypeName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直接返回BookTypeName</span><span class="token punctuation">}</span></code></pre><h2 id="Controller模块和JDBC"><a href="#Controller模块和JDBC" class="headerlink" title="Controller模块和JDBC"></a>Controller模块和JDBC</h2><p>以下是其中一个Book类的数据交互的代码，也就是连接用户输入的数据和数据库里面的数据的操作</p><ul><li>MySQL的语句，增删查改，String类型</li><li>调用prepareStatement()来预处理，</li><li>调用setString()，设置MySQL语句中？的内容</li><li>executUpdate()，返回int类型； 若execuQuer(); 返回ResultSet类型</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>luo<span class="token punctuation">.</span>Dao<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>luo<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>Book<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>luo<span class="token punctuation">.</span>Model<span class="token punctuation">.</span>BookType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>luo<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>StringUtil<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 图书添加     * @param con     * @param book     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into t_book values(null,?,?,?,?,?,?)"</span><span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getBookTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getBookDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 查询     * @param con     * @param book     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> ResultSet <span class="token function">list</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"select * from t_book b,t_booktype bt where b.bookTypeId = bt.id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and b.bookName like '%"</span><span class="token operator">+</span> book<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"%'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and b.author like '%"</span><span class="token operator">+</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"%'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getBookTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">.</span><span class="token function">getBookTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" and b.bookTypeId="</span><span class="token operator">+</span> book<span class="token punctuation">.</span><span class="token function">getBookTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新数据     * @param con     * @param book     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">upDate</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> Book book<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"UpDate t_book set bookName=?, author=?, sex=?, price=?, bookTypeId=?, bookDesc=? where id=?"</span><span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getBookName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setFloat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getBookTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getBookDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除数据     * @param con     * @param id     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Delete</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"Delete from t_book where id=?"</span><span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断是否存在书     * @param con     * @param book     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">existBook</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> String bookTypeId<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from t_book where bookTypeId =?"</span><span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>bookTypeId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="View模块"><a href="#View模块" class="headerlink" title="View模块"></a>View模块</h1><ul><li>登录界面</li><li>主界面 <ul><li>图书类别添加界面</li><li>图书类别管理界面</li><li>图书添加界面</li><li>图书维护界面<br>通过windowbuilder插件来创建一个Frame<br>登录界面通过登录按钮跳到主界面<br>以下是登录按钮响应事件的操作</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 登录操作 * @param e */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loginActionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          String userName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userNameTxt<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>passwordTxt<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断输入是否为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//连接数据库</span>        conn <span class="token operator">=</span> dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        User correntUser <span class="token operator">=</span> userdao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>correntUser <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**************************************            这里先调用dispose()的方法，把当前的界面关掉          再通过new出新的主界面，跳转到主界面上去          ***************************************/</span>            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">MainFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            dbUtil<span class="token punctuation">.</span><span class="token function">Closecon</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>登录界面和主界面的类都是继承<strong>JFrame</strong></p><p>从工具栏选择一个JDesktopPane放置到contenPane里面，将它重命名为table<br>点击menuBar的一个选项，让它弹出一个界面（通过windowbuilder插件创建一个JInternalFrame，该选项添加响应事件，通过table调用add()的方法把这个界面显示出来），这个界面的类继承<strong> JInternalFrame </strong>，只能出现在table里面</p><p><strong> 这里的BookTypeManagerFrame是其中一个继承JInternalFrame的类，显示出的框会在主界面里面 </strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//  监听菜单栏上的图书类别管理这一选项的响应</span>mntmNewMenuItem_2<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BookTypeManagerFrame bookTypeManagerFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookTypeManagerFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new出一个新的图书类别管理类</span>        bookTypeManagerFrame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置可见</span>        table<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bookTypeManagerFrame<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加进来主界面上</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一开始拖入JTextArea进来视图显示是没有边框的<br>所以呢，要在该界面对应的代码中加入</p><pre class=" language-java"><code class="language-java">bookTypeDesc<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBorder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong> 点击按钮监听事件操作。 </strong>比如点击添加键，就从数据库中获取数据显示在界面上，其实就是对数据库的操作和数据放在界面上显示的处理</p><ul><li>getText()获取用户输入的内容</li><li>工具类DbUtil，连接数据库</li><li>调用Controller模块里面的类的方法，实现相关操作</li><li>连接完数据库记得关闭！</li><li>中间加上一些业务逻辑判断<br>这是项目中，获取数据在JTextField控件显示的小例子<br>至于重置编辑框为空的操作就是简单地重写setText（“”）一下；</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过对按钮的监听，具体实现代码创建一个AddActionPerformed()方法写在外面，这里执行AddActionPerformed()方法</span>btnNewButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">AddActionPerformed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 添加数据 * @param evt */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">AddActionPerformed</span><span class="token punctuation">(</span>ActionEvent evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String Name <span class="token operator">=</span> bookTypeName<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String Desc <span class="token operator">=</span> bookTypeDesc<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"图书类别名称不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     BookType bookType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookType</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> Desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> bookTypeDao<span class="token punctuation">.</span><span class="token function">addBookType</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> bookType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        JOptionPane<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            dbUtil<span class="token punctuation">.</span><span class="token function">Closecon</span><span class="token punctuation">(</span>con<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong> 用一个表格来显示数据。 </strong>拖入scrollPane，然后在它里面拖入Jtable，通过Jtable的<strong> model属性 </strong>设置表的标题与行列数。接着可以<strong> 通过表格Jtable的mousePressed， </strong>来响应鼠标操作，从而对表中点击到的那一行的数据操作，显示在JTextField上</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 填充列表 * @param book */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fillTable</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">{</span>    DefaultTableModel dtm <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultTableModel<span class="token punctuation">)</span> bookTable<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dtm<span class="token punctuation">.</span><span class="token function">setRowCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Vector v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"bookName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"bookDesc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"bookTypeName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dtm<span class="token punctuation">.</span><span class="token function">addRow</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fillTable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用此填充表格的方法函数</span></code></pre><p>点击鼠标响应事件</p><pre class=" language-java"><code class="language-java">bookTypeTable<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span>MouseEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bookTypeTableMousePressed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 点击图表显示事件 * @param evt */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bookTypeTableMousePressed</span><span class="token punctuation">(</span>MouseEvent evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> bookTypeTable<span class="token punctuation">.</span><span class="token function">getSelectedRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取当前的行号</span>    <span class="token comment" spellcheck="true">//界面上对应控件通过调用setText()来显示出那一行的数据</span>    idTxt<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> bookTypeTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bookTypeNameTxt<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> bookTypeTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bookTypeDescTxt<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> bookTypeTable<span class="token punctuation">.</span><span class="token function">getValueAt</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>关于下面这两种选择的数据填充：<br>这两个控件分别重命名为s_bookTypeBox和m_bookTypeBox，通过这两个名字来调用addItem()函数填充数据<br>按照面向对象的思想，直接传入的参数是BookType类的对象，所以要重写该类的toString()方法（前面提到的）。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 填充bookType * @param type */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fillBookType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>    Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    BookType bookType <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> dbUtil<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> bookTypeDao<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BookType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bookType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookType<span class="token punctuation">.</span><span class="token function">setBookTypeName</span><span class="token punctuation">(</span><span class="token string">"请选择..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookType<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>s_bookTypeBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>bookType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bookType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookType<span class="token punctuation">.</span><span class="token function">setBookTypeName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"bookTypeName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bookType<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>s_bookTypeBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>bookType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"modify"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>m_bookTypeBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>bookType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fillBookType</span><span class="token punctuation">(</span><span class="token string">"modify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fillBookType</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>补充一下上面用到的list()<br>模糊查询</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 查询 * @param con * @param bookType * @return * @throws Exception */</span><span class="token keyword">public</span> ResultSet <span class="token function">list</span><span class="token punctuation">(</span>Connection con<span class="token punctuation">,</span> BookType bookType<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"select * from t_booktype "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>bookType<span class="token punctuation">.</span><span class="token function">getBookTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"and bookTypeName like '%"</span><span class="token operator">+</span> bookType<span class="token punctuation">.</span><span class="token function">getBookTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"%'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"and"</span><span class="token punctuation">,</span> <span class="token string">"where"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet&amp;Response</title>
      <link href="2019/03/26/hou-duan/servlet/"/>
      <url>2019/03/26/hou-duan/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>运行在服务器端的一个java小程序,本质就是一个类,接受请求,处理逻辑,生成动态内容<br><a id="more"></a></p><h2 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//初始化</span></code></pre><ul><li>初始化方法</li><li>执行者:服务器</li><li>执行次数:一次</li><li>执行时机:默认第一次访问的时候</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span>ServletResponse response<span class="token punctuation">)</span><span class="token operator">:</span>服务 处理业务逻辑</code></pre><ul><li>服务</li><li>执行者:服务器</li><li>执行次数:请求一次执行一次</li><li>执行时机:请求来的时候</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>销毁</code></pre><ul><li>销毁</li><li>执行者:服务器</li><li>执行次数:只执行一次</li><li>执行时机:当servlet被移除的时候或者服务器正常关闭的时候</li></ul><p><strong>serlvet是单实例多线程</strong><br>默认第一次访问的时候,服务器创建servlet,并调用init实现初始化操作.并调用一次service方法<br>每当请求来的时候,服务器创建一个线程,调用service方法执行自己的业务逻辑<br><strong>当serlvet被移除的时候或服务器正常关闭的时候,服务器调用servlet的destroy方法实现销毁操作</strong></p><h2 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h2><blockquote><p>存放共享的数据</p></blockquote><h3 id="servletcontext"><a href="#servletcontext" class="headerlink" title="servletcontext"></a>servletcontext</h3><p>当成map集合<br>常用方法:<br>    xxxAttribute()</p><h3 id="servletcontext创建和销毁"><a href="#servletcontext创建和销毁" class="headerlink" title="servletcontext创建和销毁:"></a>servletcontext创建和销毁:</h3><ul><li>当项目启动的时候,服务器为每一个web项目创建一个servletcontext对象.</li><li>当项目被移除的时候或者服务器关闭的时候servletcontext销毁</li></ul><h2 id="请求转发和重定向区别"><a href="#请求转发和重定向区别" class="headerlink" title="请求转发和重定向区别:"></a>请求转发和重定向区别:</h2><ul><li><p>重定向发送两次请求,请求转发一次请求</p></li><li><p>重定向地址栏发生改变,请求转发不变</p></li><li><p>重定向是从浏览器发送,请求转发是服务器内部</p></li><li><p>重定向不存在request域对象,请求转发可以使用request域对象</p></li><li><p>重定向是response的方法,请求转发是request的方法</p></li><li><p>重定向可以请求站外资源,请求转发不可以</p></li></ul><h1 id="Response-响应-往浏览器写数据"><a href="#Response-响应-往浏览器写数据" class="headerlink" title="Response:响应(往浏览器写数据)"></a>Response:响应(往浏览器写数据)</h1><p><strong>操作响应行</strong></p><ul><li>状态码</li><li>常用方法:<br>  setStatus(int code)  针对的1xx 2xx 3xx</li></ul><p><strong>操作响应头</strong></p><ul><li>setHeader(String key,String value):设置</li><li><p>addHeader(String key,String value):添加</p></li><li><p>常用的响应头:</p><ul><li>location:重定向:<pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"跳转路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>refresh:定时刷新<pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"refresh"</span><span class="token punctuation">,</span><span class="token string">"秒数;url=路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//java</span></code></pre></li><li>meta标签//html代码<br>content-type:设置文件的mimeType,及设置响应流的编码并且通知浏览器用什么编码打开<pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>content-disposition:设置文件下载<pre class=" language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>文件名称<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><p><strong>操作响应体</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//注意:俩流互斥,服务器帮我们关闭此流</span>    <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//响应的中文乱码:</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="通过Response生成验证码"><a href="#通过Response生成验证码" class="headerlink" title="通过Response生成验证码"></a>通过Response生成验证码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用java图形界面技术绘制一张图片</span>    <span class="token keyword">int</span> charNum <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 创建一张内存图片</span>    BufferedImage bufferedImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span>BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.获得绘图对象</span>    Graphics graphics <span class="token operator">=</span> bufferedImage<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3、绘制背景颜色</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4、绘制图片边框</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5、输出验证码内容</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphics<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 随机输出4个字符</span>    Graphics2D graphics2d <span class="token operator">=</span> <span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> graphics<span class="token punctuation">;</span>    String s <span class="token operator">=</span> <span class="token string">"ABCDEFGHGKLMNPQRSTUVWXYZ23456789"</span><span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//session中要用到</span>    String msg<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String content <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      msg<span class="token operator">+=</span>content<span class="token punctuation">;</span>      <span class="token keyword">double</span> theta <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//让字体扭曲</span>      graphics2d<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      graphics2d<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      graphics2d<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span>theta<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      x <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6、绘制干扰线</span>    graphics<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> x1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> x2 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> y1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> y2 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>      graphics<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 释放资源</span>    graphics<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 图片输出 ImageIO</span>    ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferedImage<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="点击换一张-js实现"><a href="#点击换一张-js实现" class="headerlink" title="点击换一张(js实现):"></a>点击换一张(js实现):</h2><p>不能通过刷新页面的方式来更换验证码,提交表单的数据也会被刷新,降低用户体验。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">changeImg</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//操作src属性</span>        obj<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"页面路径?i="</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">"验证码"</span> src<span class="token operator">=</span><span class="token string">"页面路径"</span> title<span class="token operator">=</span><span class="token string">"看不清楚,换一张"</span> onclick<span class="token operator">=</span><span class="token string">"changeImg(this)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span></code></pre><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><h3 id="超链接下载"><a href="#超链接下载" class="headerlink" title="超链接下载"></a>超链接下载</h3><pre><code>&lt;a href="/project/download/example.txt"&gt;下载example.txt&lt;/a&gt;</code></pre><h3 id="编码下载-通过servlet完成"><a href="#编码下载-通过servlet完成" class="headerlink" title="编码下载 通过servlet完成"></a>编码下载 通过servlet完成</h3><pre class=" language-html"><code class="language-html">/*若浏览器能解析该资源的mime类型,则打开;若不能解析则下载;*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/project/download?name<span class="token punctuation">=</span>example.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载example.txt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*设置文件的mime类型*/</span>String mimeType<span class="token operator">=</span>context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>文件名<span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*设置下载头信息 content-disposition*/</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span><span class="token operator">+</span>文件名称<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*提供流*/</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="request-请求-获取浏览器发送过来的数据"><a href="#request-请求-获取浏览器发送过来的数据" class="headerlink" title="request:请求 获取浏览器发送过来的数据"></a>request:请求 获取浏览器发送过来的数据</h1><h2 id="操作请求行"><a href="#操作请求行" class="headerlink" title="操作请求行"></a>操作请求行</h2><pre><code>getMethod():请求方式getContextPath():获取项目名称getRemoteAddr():获取请求的ip地址</code></pre><h2 id="操作请求头"><a href="#操作请求头" class="headerlink" title="操作请求头"></a>操作请求头</h2><pre><code>String getHeader(String key)</code></pre><p>###常见的头信息:<br>    user-agent:获取浏览器内核<br>    referer:页面从那里跳转过来的</p><h2 id="操作请求参数"><a href="#操作请求参数" class="headerlink" title="操作请求参数"></a>操作请求参数</h2><pre><code>String getParameter(String key):String[] getParameterValues(String key):Map&lt;String ,String[]&gt; getParameterMap();</code></pre><h2 id="请求的中文乱码"><a href="#请求的中文乱码" class="headerlink" title="请求的中文乱码:"></a>请求的中文乱码:</h2><pre><code>对于get请求:参数追加到地址栏,会使用utf-8编码,服务器(tomcat7)接受到请求之后,使用iso-8859-1解码,所以会出现乱码对于post请求,参数是放在请求体中,服务器获取请求体的时候使用iso-8859-1解码,也会出现乱码通用的方法:    new String(参数.getBytes("iso-8859-1"),"utf-8");针对于post请求来说:只需要将请求流的编码设置成utf-8即可    request.setCharacterEncoding("utf-8");</code></pre><h2 id="域对象-request"><a href="#域对象-request" class="headerlink" title="域对象:request"></a>域对象:request</h2><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发:"></a>请求转发:</h3><pre><code>request.getRequestDispatcher("内部路径").forward(request,response);</code></pre><h3 id="request生命周期"><a href="#request生命周期" class="headerlink" title="request生命周期:"></a>request生命周期:</h3><pre><code>一次请求</code></pre><h1 id="扩展（使用commons-io工具类）"><a href="#扩展（使用commons-io工具类）" class="headerlink" title="扩展（使用commons-io工具类）"></a>扩展（使用commons-io工具类）</h1><pre><code>对拷流IOUtils.copy(is,os);</code></pre><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*获取下载的文件名称*/</span>    String filename <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.设置文件的mime类型</span>    String mimeType <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMimeType</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.设置下载的头信息</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.对拷流</span>    <span class="token comment" spellcheck="true">/*获取输入*/</span>    InputStream is <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/download/"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*获取输出流*/</span>    ServletOutputStream os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Servlet </tag>
            
            <tag> Response </tag>
            
            <tag> Request </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA 2019 优化配置</title>
      <link href="2019/02/20/qi-ta/idea/"/>
      <url>2019/02/20/qi-ta/idea/</url>
      
        <content type="html"><![CDATA[<h2 id="Intellij-IDEA-2019-优化配置"><a href="#Intellij-IDEA-2019-优化配置" class="headerlink" title="Intellij IDEA 2019 优化配置"></a>Intellij IDEA 2019 优化配置</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        工欲善其事必先利其器，我平时比较喜欢使用IDEA，这个软件可以很大程度上提高工作效率。IDEA全称IntelliJ  IDEA，是用于java语言开发的集成环境（也可用于其他语言），IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、  创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。  一直都有想过写一篇关于IDEA的设置优化的博文，因为确实网上的不是很适合我的风格。且网上的优化教程不是很多，自己摸索出来一下，希望能够帮到大家。</p><p>本文呢，会分为一下三部分进行说明： </p><ol><li><p>IDEA设置优化 </p></li><li><p>IDEA的插件优化 </p></li><li><p>IDEA的快捷键优化 </p></li></ol><p>其中呢，会针对个别插件进行说明。</p><h3 id="1、IDEA设置优化"><a href="#1、IDEA设置优化" class="headerlink" title="1、IDEA设置优化"></a>1、IDEA设置优化</h3><p>IDEA破解方法：使用的是最新版的IDEA<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">破解方法</a></p><p>另外提供破解补丁的方法<a href="https://www.ghpym.com/jetbrainspath.html" target="_blank" rel="noopener">JetBrains全系列破解补丁v1.0</a></p><h4 id="1-1、代码提示"><a href="#1-1、代码提示" class="headerlink" title="1.1、代码提示"></a>1.1、代码提示</h4><p>IDEA默认是不区分大小写的，晚上很多教程都是使用的2017版本的IDEA，事实上，从2018版本开始，IDEA的设置中心已经进行稍微调整；</p><p>路径：<code>Setting</code> ——&gt; <code>Editor</code> ——&gt;<code>General</code> ——&gt; <code>Code Completion</code> ——&gt; <code>Match case</code></p><p>取消 <strong>Match Case</strong> 前的选择即可；</p><p>图如下：</p><img src="/2019/02/20/qi-ta/idea/1.png"><h4 id="1-2、自动导包"><a href="#1-2、自动导包" class="headerlink" title="1.2、自动导包"></a>1.2、自动导包</h4><p>我需要在使用某个类的时候自动导入需要的包，默认的方式是要手动进行导包；</p><p>路径：<code>Setting</code> ——&gt; <code>Editor</code> ——&gt; <code>General</code> ——&gt; <code>Auto Import</code></p><p><code>Add Unambiguous inports on the fly</code>: 在写代码的时候会自动的优化； </p><p><code>optimize imports on the fly</code>：在写代码的时候会自动导包；</p><p>我的设置如下：（注意，因为<code>optimize imports on the fly</code>这个设置是只针对当前项目的，所以如果需要，请在每创建一个项目的时候都来设置下）</p><img src="/2019/02/20/qi-ta/idea/2.png"><h4 id="1-3、取消启动时自动进入上一次工程"><a href="#1-3、取消启动时自动进入上一次工程" class="headerlink" title="1.3、取消启动时自动进入上一次工程"></a>1.3、取消启动时自动进入上一次工程</h4><p>IDEA默认是启动的时候进入到上一次打开的项目中，这个设置可能会在我们想换一个项目打开的时候出现一些画蛇添足。</p><p>路径：<code>Setting</code> ——&gt; <code>Appearance &amp; Behavior</code> ——&gt; <code>System Setting</code> </p><p>取消勾选<strong>Reopen last project on startup;</strong></p><p>设置截图如下：</p><img src="/2019/02/20/qi-ta/idea/3.png"><h4 id="1-4、鼠标滑轮调整编辑区域字体大小"><a href="#1-4、鼠标滑轮调整编辑区域字体大小" class="headerlink" title="1.4、鼠标滑轮调整编辑区域字体大小"></a><strong>1.4、鼠标滑轮调整编辑区域字体大小</strong></h4><p>写代码的时候眼睛酸痛，需要临时的放大或者缩小编辑区的代码字体大小；</p><p>路径：<code>Setting</code> ——&gt; <code>Editor</code> ——&gt; <code>General</code></p><p>在Mouse中<strong>勾选”change font size (Zoom ) with Ctrl + Mouse Wheel”</strong>；</p><p>截图如下：</p><img src="/2019/02/20/qi-ta/idea/4.png"><h4 id="1-5、自动保存"><a href="#1-5、自动保存" class="headerlink" title="1.5、自动保存"></a>1.5、自动保存</h4><p>自动保存与其他软件的自动保存不一样，其他软件的自动保存会丢失自己的修改记录，Ctrl+Z就回不去了，而IDEA不一样；自动保存是IDEA默认开启的，如果需要关闭的话可以参照以下方式：</p><p>路径：<code>Setting</code> ——&gt; <code>Appearance&amp;Behaior</code> ——&gt; <code>System Settings</code> </p><p>勾选或取消”<strong>Synchronize files on frame or editor table activation</strong> “以及”<strong>Save files on frame deactivation</strong>“；</p><p>截图如下：</p><img src="/2019/02/20/qi-ta/idea/5.png"><h4 id="1-6、设置自带的Terminal为Git-Bash"><a href="#1-6、设置自带的Terminal为Git-Bash" class="headerlink" title="1.6、设置自带的Terminal为Git Bash"></a>1.6、设置自带的Terminal为Git Bash</h4><p>Windows环境下的Terminal是CMD的，如果电脑上有git的话，我更加喜欢将Terminal改为Git Bash，修改方式如下：</p><p>路径：<code>Setting</code> ——&gt; <code>Tools</code> ——&gt; <code>Terminal</code></p><p><strong>修改Shell path 为git的bash.exe的路径</strong>即可；</p><p>截图如下：</p><img src="/2019/02/20/qi-ta/idea/6.png"><p>修改后的Terminal如果内容里面有中文是会显示乱码的，解决方式：在Git的安装目录的etc目录下，如：<code>D:\Program Files\Git\etc</code>，找到bash.bashrc文件在其最后面添加以下代码，然后重新启动IDEA即可；</p><pre class=" language-js"><code class="language-js"># 解决中文乱码<span class="token keyword">export</span> LANG<span class="token operator">=</span><span class="token string">"zh_CN.UTF-8"</span><span class="token keyword">export</span> LC_ALL<span class="token operator">=</span><span class="token string">"zh_CN.UTF-8"</span><span class="token number">123</span></code></pre><p>1.7、设置模板</p><p>请参考博文：<a href="https://blog.csdn.net/u013412790/article/details/52807102" target="_blank" rel="noopener">设置模板</a></p><h3 id="2、插件篇"><a href="#2、插件篇" class="headerlink" title="2、插件篇"></a>2、插件篇</h3><h4 id="2-1、Lombok-plugin"><a href="#2-1、Lombok-plugin" class="headerlink" title="2.1、Lombok plugin"></a>2.1、Lombok plugin</h4><p>开发神器，可以简化你的实体类，让你i不再写get/set方法，还能快速的实现builder模式，以及链式调用方法，总之就是为了简化实体类而生的插件。</p><img src="/2019/02/20/qi-ta/idea/6504fb7d60449037a556122b349c5aba.gif"><h4 id="2-2、GsonFormat"><a href="#2-2、GsonFormat" class="headerlink" title="2.2、GsonFormat"></a>2.2、GsonFormat</h4><p>一键根据json文本生成java类 非常方便</p><img src="/2019/02/20/qi-ta/idea/e35fedf962169bcb26b6a7d4b8bb2de9.gif"><h4 id="2-3、Rainbow-Brackets"><a href="#2-3、Rainbow-Brackets" class="headerlink" title="2.3、Rainbow Brackets"></a>2.3、Rainbow Brackets</h4><p>彩虹颜色的括号 看着很舒服 敲代码效率变高。可以很清楚明白的区分各个括号的范围</p><img src="/2019/02/20/qi-ta/idea/7.png"><h4 id="2-4、Translation"><a href="#2-4、Translation" class="headerlink" title="2.4、Translation"></a>2.4、Translation</h4><p>一款翻译插件，多翻译引擎：Google翻译、有道翻译、百度翻译、多语言互译、语音朗读、自动选词、自动单词拆分等功能</p><h4 id="2-5、GrepConsole"><a href="#2-5、GrepConsole" class="headerlink" title="2.5、GrepConsole"></a>2.5、GrepConsole</h4><p>Idea console输出日志一大推，想要快速找到自己想要的类型日志，使用此插件可以快速定位到自己关注的类型日志，比如error，warn，自己也可以配置自己喜欢的颜色~</p><p>自己喜欢的一套配色：</p><pre class=" language-markdown"><code class="language-markdown">Type        Colorverbose:    #BBBdebug:      #33B5E5info:       #9C0assert:     #A6Cerror:      #F44warning:    #FB31234567</code></pre><h4 id="2-6、FindBugs-IDEA"><a href="#2-6、FindBugs-IDEA" class="headerlink" title="2.6、FindBugs-IDEA"></a>2.6、FindBugs-IDEA</h4><p>完代码后检测下 避免低级bug，强烈建议用一下，一不小心就发现很多老代码的bug</p><img src="/2019/02/20/qi-ta/idea/7b0514d6faf7d2446e908f88acf42417.gif"><h4 id="2-7、其他"><a href="#2-7、其他" class="headerlink" title="2.7、其他"></a>2.7、其他</h4><p>还有一些很优秀的插件，不完全列举如下：</p><p>CodeGlance    右侧文档结构图</p><p>.ignore    git 文件提交过滤</p><p>Maven Helper    maven插件，打开该pom文件的Dependency Analyzer视图</p><h3 id="3、快捷键"><a href="#3、快捷键" class="headerlink" title="3、快捷键"></a>3、快捷键</h3><h4 id="3-1、自动代码"><a href="#3-1、自动代码" class="headerlink" title="3.1、自动代码"></a>3.1、自动代码</h4><pre class=" language-markdown"><code class="language-markdown">Ctrl+Alt+O 优化导入的类和包 Alt+Insert 生成代码(如get,set方法,构造函数等) 或者右键（Generate） fori/sout/psvm + Tab Ctrl+Alt+T 生成try catch 或者 Alt+enter CTRL+ALT+T 把选中的代码放在 TRY{} IF{} ELSE{} 里 Ctrl + O 重写方法 Ctrl + I 实现方法 Ctr+shift+U 大小写转化 ALT+回车 导入包,自动修正 ALT+/ 代码提示 CTRL+J 自动代码 Ctrl+Shift+J，整合两行为一行 CTRL+空格 代码提示 CTRL+SHIFT+SPACE 自动补全代码 CTRL+ALT+L 格式化代码 CTRL+ALT+I 自动缩进 CTRL+ALT+O 优化导入的类和包 ALT+INSERT 生成代码(如GET,SET方法,构造函数等) CTRL+E 最近更改的代码 CTRL+ALT+SPACE 类名或接口名提示 CTRL+P 方法参数提示 CTRL+Q，可以看到当前方法的声明Shift+F6 重构-重命名 (包、类、方法、变量、甚至注释等) Ctrl+Alt+V 提取变量</code></pre><h4 id="3-2、查询快捷键"><a href="#3-2、查询快捷键" class="headerlink" title="3.2、查询快捷键"></a>3.2、查询快捷键</h4><pre class=" language-markdown"><code class="language-markdown">Ctrl＋Shift＋Backspace可以跳转到上次编辑的地 CTRL+ALT+ left/right 前后导航编辑过的地方 ALT+7 靠左窗口显示当前文件的结构 Ctrl+F12 浮动显示当前文件的结构 ALT+F7 找到你的函数或者变量或者类的所有引用到的地方 CTRL+ALT+F7 找到你的函数或者变量或者类的所有引用到的地方Ctrl+Shift+Alt+N 查找类中的方法或变量 双击SHIFT 在项目的所有目录查找文件 Ctrl+N 查找类 Ctrl+Shift+N 查找文件 CTRL+G 定位行 CTRL+F 在当前窗口查找文本 CTRL+SHIFT+F 在指定窗口查找文本 CTRL+R 在 当前窗口替换文本 CTRL+SHIFT+R 在指定窗口替换文本 ALT+SHIFT+C 查找修改的文件 CTRL+E 最近打开的文件 F3 向下查找关键字出现位置 SHIFT+F3 向上一个关键字出现位置 选中文本，按Alt+F3 ，高亮相同文本，F3逐个往下查找相同文本 F4 查找变量来源CTRL+SHIFT+O 弹出显示查找内容Ctrl+W 选中代码，连续按会有其他效果 F2 或Shift+F2 高亮错误或警告快速定位 Ctrl+Up/Down 光标跳转到第一行或最后一行下Ctrl+B 快速打开光标处的类或方法 CTRL+ALT+B 找所有的子类 CTRL+SHIFT+B 找变量的类Ctrl+Shift+上下键 上下移动代码 Ctrl+Alt+ left/right 返回至上次浏览的位置 Ctrl+X 删除行 Ctrl+D 复制行 Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/…/ ）Ctrl+H 显示类结构图 Ctrl+Q 显示注释文档Alt+F1 查找代码所在位置 Alt+1 快速打开或隐藏工程面板Alt+ left/right 切换代码视图 ALT+ ↑/↓ 在方法间快速移动定位 CTRL+ALT+ left/right 前后导航编辑过的地方 Ctrl＋Shift＋Backspace可以跳转到上次编辑的地 Alt+6 查找TODO</code></pre><h4 id="3-3、其他快捷键"><a href="#3-3、其他快捷键" class="headerlink" title="3.3、其他快捷键"></a>3.3、其他快捷键</h4><pre class=" language-markdown"><code class="language-markdown">SHIFT+ENTER 另起一行 CTRL+Z 倒退(撤销) CTRL+SHIFT+Z 向前(取消撤销) CTRL+ALT+F12 资源管理器打开文件夹 ALT+F1 查找文件所在目录位置 SHIFT+ALT+INSERT 竖编辑模式 CTRL+F4 关闭当前窗口 Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义 Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单</code></pre><h4 id="3-4、调试快捷键"><a href="#3-4、调试快捷键" class="headerlink" title="3.4、调试快捷键"></a>3.4、调试快捷键</h4><pre class=" language-markdown"><code class="language-markdown">alt+F8 debug时选中查看值 Alt+Shift+F9，选择 Debug Alt+Shift+F10，选择 Run Ctrl+Shift+F9，编译 Ctrl+Shift+F8，查看断点F7，步入 Shift+F7，智能步入 Alt+Shift+F7，强制步入 F8，步过 Shift+F8，步出 Alt+Shift+F8，强制步过Alt+F9，运行至光标处 Ctrl+Alt+F9，强制运行至光标处 F9，恢复程序 Alt+F10，定位到断点</code></pre><h4 id="3-5、重构"><a href="#3-5、重构" class="headerlink" title="3.5、重构"></a>3.5、重构</h4><pre class=" language-markdown"><code class="language-markdown">Ctrl+Alt+Shift+T，弹出重构菜单 Shift+F6，重命名 F6，移动 F5，复制 Alt+Delete，安全删除 Ctrl+Alt+N，内联</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA配置 </tag>
            
            <tag> IDEA快捷键 </tag>
            
            <tag> IDEA插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置</title>
      <link href="2019/01/17/qi-ta/hexo/"/>
      <url>2019/01/17/qi-ta/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="常用Hexo命令"><a href="#常用Hexo命令" class="headerlink" title="常用Hexo命令"></a>常用Hexo命令</h2><p>1、常见命令</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment" spellcheck="true">#新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true">#新建页面</span>hexo generate <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>hexo server <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy <span class="token comment" spellcheck="true">#部署到GitHub</span>hexo <span class="token function">help</span>  <span class="token comment" spellcheck="true"># 查看帮助</span>hexo version  <span class="token comment" spellcheck="true">#查看Hexo的版本</span></code></pre><p>2、缩写</p><pre class=" language-bash"><code class="language-bash">hexo n <span class="token operator">==</span> hexo newhexo g <span class="token operator">==</span> hexo generatehexo s <span class="token operator">==</span> hexo serverhexo d <span class="token operator">==</span> hexo deploy</code></pre><p>3、组合命令</p><pre class=" language-bash"><code class="language-bash">hexo s -g <span class="token comment" spellcheck="true">#生成并本地预览</span>hexo d -g <span class="token comment" spellcheck="true">#生成并上传</span></code></pre><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>1、定位到我们的hexo根目录，执行命令</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">'my-first-page'</span></code></pre><p>2、hexo会帮我们在<code>_posts</code>下生成相关md文件</p><p>3、我们只需要打开这个文件就可以开始写博客了</p><p>4、一般md文件头部完整格式如下</p><pre class=" language-markdown"><code class="language-markdown">title: postName #文章页面上的显示名称，一般是中文date: 1111-11-11 11:11:11 #文章生成时间categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</code></pre><p>5、如何让博文列表不显示全部内容</p><p>​    在合适的位置加上<code>&lt;!--more--&gt;</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 博客框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo配置 </tag>
            
            <tag> Hexo常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
